
Iftier Alhamdulillah.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006fe4  08006fe4  00007fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007040  08007040  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007040  08007040  00008040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007048  08007048  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007048  08007048  00008048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800704c  0800704c  0000804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007050  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  2000005c  080070ac  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  080070ac  000097d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d34  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a1  00000000  00000000  0001ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00020668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f69  00000000  00000000  000219e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247a7  00000000  00000000  00022951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017775  00000000  00000000  000470f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e31c9  00000000  00000000  0005e86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141a36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b48  00000000  00000000  00141a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001475c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fcc 	.word	0x08006fcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08006fcc 	.word	0x08006fcc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <init_filter>:
    int flex_detected;
    int initialized;
} EMGFilter;

// Initialize filter
void init_filter(EMGFilter* filter) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e007      	b.n	8000e46 <init_filter+0x1e>
        filter->raw_buffer[i] = 0;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	ddf4      	ble.n	8000e36 <init_filter+0xe>
    }
    filter->buf_i = 0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	641a      	str	r2, [r3, #64]	@ 0x40
    filter->baseline = 1930;  // rest value is around 1930 for raw signal so we'll start here
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a16      	ldr	r2, [pc, #88]	@ (8000eb0 <init_filter+0x88>)
 8000e56:	645a      	str	r2, [r3, #68]	@ 0x44
    filter->filtered_value = 80; // env signal was around 80 at rest so I'm trying to mimick that
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a16      	ldr	r2, [pc, #88]	@ (8000eb4 <init_filter+0x8c>)
 8000e5c:	649a      	str	r2, [r3, #72]	@ 0x48
    filter->lp_value = 1930;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a13      	ldr	r2, [pc, #76]	@ (8000eb0 <init_filter+0x88>)
 8000e62:	64da      	str	r2, [r3, #76]	@ 0x4c
    filter->hp_value = 0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	651a      	str	r2, [r3, #80]	@ 0x50
    filter->prev_high_pass_input = 1930;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a10      	ldr	r2, [pc, #64]	@ (8000eb0 <init_filter+0x88>)
 8000e70:	655a      	str	r2, [r3, #84]	@ 0x54

    for (int i = 0; i < 4; i++) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	e009      	b.n	8000e8c <init_filter+0x64>
        filter->last_few_values[i] = 1930;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	3216      	adds	r2, #22
 8000e7e:	f240 718a 	movw	r1, #1930	@ 0x78a
 8000e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 4; i++) {
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	ddf2      	ble.n	8000e78 <init_filter+0x50>
    }
    filter->last_few_index = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	669a      	str	r2, [r3, #104]	@ 0x68
    filter->flex_detected = 0;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	66da      	str	r2, [r3, #108]	@ 0x6c
    filter->initialized = 0;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	44f14000 	.word	0x44f14000
 8000eb4:	42a00000 	.word	0x42a00000

08000eb8 <PCA9685_SetBit>:




// PCA setup and servo control
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;

  // Read the contents of the register given
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDR, Register, 1, &readValue, 1, 10);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	230a      	movs	r3, #10
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	f107 030f 	add.w	r3, r7, #15
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2301      	movs	r3, #1
 8000ede:	2180      	movs	r1, #128	@ 0x80
 8000ee0:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <PCA9685_SetBit+0x90>)
 8000ee2:	f002 f85f 	bl	8002fa4 <HAL_I2C_Mem_Read>

  // Modify the Bit given to either clear (0) or set (1)
  if (Value == 0) {
 8000ee6:	797b      	ldrb	r3, [r7, #5]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10d      	bne.n	8000f08 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	4013      	ands	r3, r2
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e00a      	b.n	8000f1e <PCA9685_SetBit+0x66>
  } else {
    readValue |= (1 << Bit);
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	b25a      	sxtb	r2, r3
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	73fb      	strb	r3, [r7, #15]
  };

  // Place updated 8-bits value to register
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDR, Register, 1, &readValue, 1, 10);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	230a      	movs	r3, #10
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	f107 030f 	add.w	r3, r7, #15
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	2180      	movs	r1, #128	@ 0x80
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <PCA9685_SetBit+0x90>)
 8000f36:	f001 ff3b 	bl	8002db0 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 ff60 	bl	8001e00 <HAL_Delay>
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000c0 	.word	0x200000c0

08000f4c <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af04      	add	r7, sp, #16
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale_val;
  int max_frequency = 1526;
 8000f56:	f240 53f6 	movw	r3, #1526	@ 0x5f6
 8000f5a:	617b      	str	r3, [r7, #20]
  int min_frequency = 24;
 8000f5c:	2318      	movs	r3, #24
 8000f5e:	613b      	str	r3, [r7, #16]

  // scales frequency of 24Hz to 1526Hz to between 256 to 3, as per page 1 and
  // 25 of datasheet
  if (frequency >= max_frequency) {
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dc02      	bgt.n	8000f6e <PCA9685_SetPWMFrequency+0x22>
    prescale_val = 0x03;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e011      	b.n	8000f92 <PCA9685_SetPWMFrequency+0x46>
  } else if (frequency <= min_frequency) {
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	db02      	blt.n	8000f7c <PCA9685_SetPWMFrequency+0x30>
    prescale_val = 0xFF;
 8000f76:	23ff      	movs	r3, #255	@ 0xff
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e00a      	b.n	8000f92 <PCA9685_SetPWMFrequency+0x46>
  } else {
    prescale_val = 25000000 / (4096 * frequency);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	031b      	lsls	r3, r3, #12
 8000f80:	4a14      	ldr	r2, [pc, #80]	@ (8000fd4 <PCA9685_SetPWMFrequency+0x88>)
 8000f82:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	73fb      	strb	r3, [r7, #15]
    prescale_val -= 1;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	73fb      	strb	r3, [r7, #15]
  }

  // Put PCA9685 to sleep (required as per page 25)
  PCA9685_SetBit(MODE1_REG, MODE1_SLEEP_BIT, 1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2104      	movs	r1, #4
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff ff8e 	bl	8000eb8 <PCA9685_SetBit>

  // Update new prescale value to register
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDR, PRESCALE_REG, 1, &prescale_val, 1,
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f107 030f 	add.w	r3, r7, #15
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	22fe      	movs	r2, #254	@ 0xfe
 8000fae:	2180      	movs	r1, #128	@ 0x80
 8000fb0:	4809      	ldr	r0, [pc, #36]	@ (8000fd8 <PCA9685_SetPWMFrequency+0x8c>)
 8000fb2:	f001 fefd 	bl	8002db0 <HAL_I2C_Mem_Write>
                    10);

  // Wake up PCA9685 board from sleep
  PCA9685_SetBit(MODE1_REG, MODE1_SLEEP_BIT, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2104      	movs	r1, #4
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff ff7c 	bl	8000eb8 <PCA9685_SetBit>

  // Restart board for use
  PCA9685_SetBit(MODE1_REG, MODE1_RESTART_BIT, 1);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2107      	movs	r1, #7
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff ff77 	bl	8000eb8 <PCA9685_SetBit>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	017d7840 	.word	0x017d7840
 8000fd8:	200000c0 	.word	0x200000c0

08000fdc <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af04      	add	r7, sp, #16
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	80bb      	strh	r3, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	807b      	strh	r3, [r7, #2]
  uint8_t pwm[4];

  // Get register address for selected channel (0-15)
  uint8_t registerAddress = LED0_ON_L + (4 * Channel);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	3306      	adds	r3, #6
 8000ff6:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000ff8:	88bb      	ldrh	r3, [r7, #4]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime >> 8;
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime >> 8;
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDR, registerAddress, 1, pwm, 4, 10);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	b29a      	uxth	r2, r3
 800101c:	230a      	movs	r3, #10
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2304      	movs	r3, #4
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	4803      	ldr	r0, [pc, #12]	@ (800103c <PCA9685_SetPWM+0x60>)
 8001030:	f001 febe 	bl	8002db0 <HAL_I2C_Mem_Write>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200000c0 	.word	0x200000c0

08001040 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	ed87 0a00 	vstr	s0, [r7]
 800104c:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f7ff fa9a 	bl	8000588 <__aeabi_f2d>
 8001054:	a31b      	add	r3, pc, #108	@ (adr r3, 80010c4 <PCA9685_SetServoAngle+0x84>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff faed 	bl	8000638 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <PCA9685_SetServoAngle+0x80>)
 800106c:	f7ff fc0e 	bl	800088c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a30f      	add	r3, pc, #60	@ (adr r3, 80010b8 <PCA9685_SetServoAngle+0x78>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff f925 	bl	80002cc <__adddf3>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fce7 	bl	8000a5c <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8001092:	edd7 7a03 	vldr	s15, [r7, #12]
 8001096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109a:	ee17 3a90 	vmov	r3, s15
 800109e:	b29a      	uxth	r2, r3
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff99 	bl	8000fdc <PCA9685_SetPWM>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	f3af 8000 	nop.w
 80010b8:	9999999a 	.word	0x9999999a
 80010bc:	40599999 	.word	0x40599999
 80010c0:	40668000 	.word	0x40668000
 80010c4:	00000000 	.word	0x00000000
 80010c8:	40799800 	.word	0x40799800

080010cc <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
  // Set PWM Frequency for Board
  PCA9685_SetPWMFrequency(frequency);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff37 	bl	8000f4c <PCA9685_SetPWMFrequency>
  // Set Auto increment to write to all registers
  PCA9685_SetBit(MODE1_REG, MODE1_AI_BIT, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	2105      	movs	r1, #5
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fee8 	bl	8000eb8 <PCA9685_SetBit>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <print_msg>:

void print_msg(char * msg) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff f889 	bl	8000210 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	2364      	movs	r3, #100	@ 0x64
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4803      	ldr	r0, [pc, #12]	@ (8001114 <print_msg+0x24>)
 8001108:	f004 fc0a 	bl	8005920 <HAL_UART_Transmit>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000015c 	.word	0x2000015c

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0b8      	sub	sp, #224	@ 0xe0
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f000 fdfd 	bl	8001d1c <HAL_Init>


  // new filter
  // Initialize the filter
      EMGFilter filter;
      init_filter(&filter);
 8001122:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe7e 	bl	8000e28 <init_filter>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 f8f4 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f000 faba 	bl	80016a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001134:	f000 fa60 	bl	80015f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001138:	f000 fa88 	bl	800164c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 800113c:	f000 f958 	bl	80013f0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001140:	f000 f9a8 	bl	8001494 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001144:	f000 f9d4 	bl	80014f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(50);  // 50Hz for servo
 8001148:	2032      	movs	r0, #50	@ 0x32
 800114a:	f7ff ffbf 	bl	80010cc <PCA9685_Init>

  /* USER CODE END 2 */
  HAL_ADC_Start(&hadc3);
 800114e:	486b      	ldr	r0, [pc, #428]	@ (80012fc <main+0x1e4>)
 8001150:	f000 febe 	bl	8001ed0 <HAL_ADC_Start>
  uint16_t adc_res; // mask = 0xff00;
  char message[100];
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	bool close = false; // used for making sure we don't go to thumbs up after close as the adc values drop after action
 8001154:	2300      	movs	r3, #0
 8001156:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	bool thumb = false;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
	bool spider_man = false; // same logic but for spider man gesture
 8001160:	2300      	movs	r3, #0
 8001162:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
	PCA9685_SetServoAngle(0, 155); // index
 8001166:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8001300 <main+0x1e8>
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff ff68 	bl	8001040 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 160); // middle
 8001170:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8001304 <main+0x1ec>
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff ff63 	bl	8001040 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(2, 160); // thumb
 800117a:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8001304 <main+0x1ec>
 800117e:	2002      	movs	r0, #2
 8001180:	f7ff ff5e 	bl	8001040 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(3, 160);
 8001184:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8001304 <main+0x1ec>
 8001188:	2003      	movs	r0, #3
 800118a:	f7ff ff59 	bl	8001040 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(4, 160);
 800118e:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8001304 <main+0x1ec>
 8001192:	2004      	movs	r0, #4
 8001194:	f7ff ff54 	bl	8001040 <PCA9685_SetServoAngle>
	HAL_Delay(800);
 8001198:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800119c:	f000 fe30 	bl	8001e00 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_ADC_Start(&hadc3);
 80011a0:	4856      	ldr	r0, [pc, #344]	@ (80012fc <main+0x1e4>)
 80011a2:	f000 fe95 	bl	8001ed0 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc3, 10) == HAL_OK)  // Wait for conversion
 80011a6:	210a      	movs	r1, #10
 80011a8:	4854      	ldr	r0, [pc, #336]	@ (80012fc <main+0x1e4>)
 80011aa:	f000 ff63 	bl	8002074 <HAL_ADC_PollForConversion>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <main+0xa8>
	      {
	          adc_res = HAL_ADC_GetValue(&hadc3);
 80011b4:	4851      	ldr	r0, [pc, #324]	@ (80012fc <main+0x1e4>)
 80011b6:	f000 ffe8 	bl	800218a <HAL_ADC_GetValue>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
	      }
	  		adc_res = HAL_ADC_GetValue(&hadc3);
 80011c0:	484e      	ldr	r0, [pc, #312]	@ (80012fc <main+0x1e4>)
 80011c2:	f000 ffe2 	bl	800218a <HAL_ADC_GetValue>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
			sprintf(message, "adc_res=%d\r\n", adc_res);
 80011cc:	f8b7 20da 	ldrh.w	r2, [r7, #218]	@ 0xda
 80011d0:	463b      	mov	r3, r7
 80011d2:	494d      	ldr	r1, [pc, #308]	@ (8001308 <main+0x1f0>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 fa59 	bl	800668c <siprintf>
			print_msg(message);
 80011da:	463b      	mov	r3, r7
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff87 	bl	80010f0 <print_msg>
//				close = false;
//			}
//	  		HAL_Delay(250);

	  		// uncomment this for using the env values for gestures
			if (adc_res > 1000) {
 80011e2:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 80011e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011ea:	d920      	bls.n	800122e <main+0x116>
				// for close
				PCA9685_SetServoAngle(0, 60);
 80011ec:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800130c <main+0x1f4>
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ff25 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(1, 60);
 80011f6:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 800130c <main+0x1f4>
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff ff20 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(2, 70);
 8001200:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8001310 <main+0x1f8>
 8001204:	2002      	movs	r0, #2
 8001206:	f7ff ff1b 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(3, 60);
 800120a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800130c <main+0x1f4>
 800120e:	2003      	movs	r0, #3
 8001210:	f7ff ff16 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(4, 80);
 8001214:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8001314 <main+0x1fc>
 8001218:	2004      	movs	r0, #4
 800121a:	f7ff ff11 	bl	8001040 <PCA9685_SetServoAngle>
				HAL_Delay(600);
 800121e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001222:	f000 fded 	bl	8001e00 <HAL_Delay>
				close = true;
 8001226:	2301      	movs	r3, #1
 8001228:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800122c:	e062      	b.n	80012f4 <main+0x1dc>
			} else if (adc_res >= 300 && adc_res <= 700 && !close && !spider_man) {
 800122e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8001232:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001236:	d333      	bcc.n	80012a0 <main+0x188>
 8001238:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 800123c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001240:	d82e      	bhi.n	80012a0 <main+0x188>
 8001242:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8001246:	f083 0301 	eor.w	r3, r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d027      	beq.n	80012a0 <main+0x188>
 8001250:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d020      	beq.n	80012a0 <main+0x188>
				PCA9685_SetServoAngle(0, 60);
 800125e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800130c <main+0x1f4>
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff feec 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(1, 60);
 8001268:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800130c <main+0x1f4>
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fee7 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(2, 160); // thumb
 8001272:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001304 <main+0x1ec>
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff fee2 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(3, 60);
 800127c:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800130c <main+0x1f4>
 8001280:	2003      	movs	r0, #3
 8001282:	f7ff fedd 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(4, 80);
 8001286:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001314 <main+0x1fc>
 800128a:	2004      	movs	r0, #4
 800128c:	f7ff fed8 	bl	8001040 <PCA9685_SetServoAngle>
				thumb = true;
 8001290:	2301      	movs	r3, #1
 8001292:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
				HAL_Delay(600);
 8001296:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800129a:	f000 fdb1 	bl	8001e00 <HAL_Delay>
 800129e:	e029      	b.n	80012f4 <main+0x1dc>
//				PCA9685_SetServoAngle(2, 70); // thumb
//				PCA9685_SetServoAngle(3, 160); // pinky
//				PCA9685_SetServoAngle(4, 80);
//				HAL_Delay(600);
//				spider_man = true;
			} else if (adc_res < 200){
 80012a0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 80012a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80012a6:	d825      	bhi.n	80012f4 <main+0x1dc>
				// for open
				PCA9685_SetServoAngle(0, 155); // index
 80012a8:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001300 <main+0x1e8>
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fec7 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(1, 160); // middle
 80012b2:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001304 <main+0x1ec>
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff fec2 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(2, 160); // thumb
 80012bc:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001304 <main+0x1ec>
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff febd 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(3, 160);
 80012c6:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001304 <main+0x1ec>
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff feb8 	bl	8001040 <PCA9685_SetServoAngle>
				PCA9685_SetServoAngle(4, 160);
 80012d0:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001304 <main+0x1ec>
 80012d4:	2004      	movs	r0, #4
 80012d6:	f7ff feb3 	bl	8001040 <PCA9685_SetServoAngle>
				HAL_Delay(600);
 80012da:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80012de:	f000 fd8f 	bl	8001e00 <HAL_Delay>
				close = false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
				spider_man = false;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
				thumb = false;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
			}
	  		HAL_Delay(100);
 80012f4:	2064      	movs	r0, #100	@ 0x64
 80012f6:	f000 fd83 	bl	8001e00 <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 80012fa:	e751      	b.n	80011a0 <main+0x88>
 80012fc:	20000078 	.word	0x20000078
 8001300:	431b0000 	.word	0x431b0000
 8001304:	43200000 	.word	0x43200000
 8001308:	08006fe4 	.word	0x08006fe4
 800130c:	42700000 	.word	0x42700000
 8001310:	428c0000 	.word	0x428c0000
 8001314:	42a00000 	.word	0x42a00000

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2234      	movs	r2, #52	@ 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f005 f9d2 	bl	80066d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <SystemClock_Config+0xd0>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <SystemClock_Config+0xd0>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	@ 0x40
 800134c:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <SystemClock_Config+0xd0>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <SystemClock_Config+0xd4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <SystemClock_Config+0xd4>)
 8001362:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <SystemClock_Config+0xd4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001378:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800137c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137e:	2302      	movs	r3, #2
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001382:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001386:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001388:	2304      	movs	r3, #4
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800138c:	23a8      	movs	r3, #168	@ 0xa8
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001394:	2307      	movs	r3, #7
 8001396:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001398:	2302      	movs	r3, #2
 800139a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fb93 	bl	8004acc <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013ac:	f000 fa46 	bl	800183c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	2105      	movs	r1, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fd08 	bl	8003de4 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013da:	f000 fa2f 	bl	800183c <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	@ 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	463b      	mov	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001402:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001404:	4a21      	ldr	r2, [pc, #132]	@ (800148c <MX_ADC3_Init+0x9c>)
 8001406:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <MX_ADC3_Init+0x98>)
 800140a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800140e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_ADC3_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_ADC3_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <MX_ADC3_Init+0xa0>)
 8001434:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_ADC3_Init+0x98>)
 800143e:	2201      	movs	r2, #1
 8001440:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_ADC3_Init+0x98>)
 800144c:	2201      	movs	r2, #1
 800144e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001450:	480d      	ldr	r0, [pc, #52]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001452:	f000 fcf9 	bl	8001e48 <HAL_ADC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800145c:	f000 f9ee 	bl	800183c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001460:	230f      	movs	r3, #15
 8001462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001464:	2301      	movs	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_ADC3_Init+0x98>)
 8001472:	f000 fe97 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800147c:	f000 f9de 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000078 	.word	0x20000078
 800148c:	40012200 	.word	0x40012200
 8001490:	0f000001 	.word	0x0f000001

08001494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_I2C1_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <MX_I2C1_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_I2C1_Init+0x58>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014d2:	f001 fb29 	bl	8002b28 <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 f9ae 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000c0 	.word	0x200000c0
 80014e8:	40005400 	.word	0x40005400
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b092      	sub	sp, #72	@ 0x48
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2220      	movs	r2, #32
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f005 f8d8 	bl	80066d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001520:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <MX_TIM1_Init+0x100>)
 8001522:	4a34      	ldr	r2, [pc, #208]	@ (80015f4 <MX_TIM1_Init+0x104>)
 8001524:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8001526:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <MX_TIM1_Init+0x100>)
 8001528:	2210      	movs	r2, #16
 800152a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <MX_TIM1_Init+0x100>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001532:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <MX_TIM1_Init+0x100>)
 8001534:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001538:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <MX_TIM1_Init+0x100>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001540:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <MX_TIM1_Init+0x100>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001546:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <MX_TIM1_Init+0x100>)
 8001548:	2280      	movs	r2, #128	@ 0x80
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800154c:	4828      	ldr	r0, [pc, #160]	@ (80015f0 <MX_TIM1_Init+0x100>)
 800154e:	f003 fd5b 	bl	8005008 <HAL_TIM_PWM_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001558:	f000 f970 	bl	800183c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001564:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001568:	4619      	mov	r1, r3
 800156a:	4821      	ldr	r0, [pc, #132]	@ (80015f0 <MX_TIM1_Init+0x100>)
 800156c:	f004 f8ba 	bl	80056e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001576:	f000 f961 	bl	800183c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157a:	2360      	movs	r3, #96	@ 0x60
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159a:	2200      	movs	r2, #0
 800159c:	4619      	mov	r1, r3
 800159e:	4814      	ldr	r0, [pc, #80]	@ (80015f0 <MX_TIM1_Init+0x100>)
 80015a0:	f003 fd82 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80015aa:	f000 f947 	bl	800183c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <MX_TIM1_Init+0x100>)
 80015d2:	f004 f903 	bl	80057dc <HAL_TIMEx_ConfigBreakDeadTime>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80015dc:	f000 f92e 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MX_TIM1_Init+0x100>)
 80015e2:	f000 fa07 	bl	80019f4 <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3748      	adds	r7, #72	@ 0x48
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000114 	.word	0x20000114
 80015f4:	40010000 	.word	0x40010000

080015f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <MX_USART3_UART_Init+0x50>)
 8001600:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001630:	f004 f926 	bl	8005880 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800163a:	f000 f8ff 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000015c 	.word	0x2000015c
 8001648:	40004800 	.word	0x40004800

0800164c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001652:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001656:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800165a:	2206      	movs	r2, #6
 800165c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001660:	2202      	movs	r2, #2
 8001662:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800166c:	2202      	movs	r2, #2
 800166e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001672:	2201      	movs	r2, #1
 8001674:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001684:	2201      	movs	r2, #1
 8001686:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001690:	f002 fa6e 	bl	8003b70 <HAL_PCD_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800169a:	f000 f8cf 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001a4 	.word	0x200001a4

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	4b5a      	ldr	r3, [pc, #360]	@ (800182c <MX_GPIO_Init+0x184>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a59      	ldr	r2, [pc, #356]	@ (800182c <MX_GPIO_Init+0x184>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b57      	ldr	r3, [pc, #348]	@ (800182c <MX_GPIO_Init+0x184>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	4b53      	ldr	r3, [pc, #332]	@ (800182c <MX_GPIO_Init+0x184>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a52      	ldr	r2, [pc, #328]	@ (800182c <MX_GPIO_Init+0x184>)
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b50      	ldr	r3, [pc, #320]	@ (800182c <MX_GPIO_Init+0x184>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	4b4c      	ldr	r3, [pc, #304]	@ (800182c <MX_GPIO_Init+0x184>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a4b      	ldr	r2, [pc, #300]	@ (800182c <MX_GPIO_Init+0x184>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b49      	ldr	r3, [pc, #292]	@ (800182c <MX_GPIO_Init+0x184>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	4b45      	ldr	r3, [pc, #276]	@ (800182c <MX_GPIO_Init+0x184>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a44      	ldr	r2, [pc, #272]	@ (800182c <MX_GPIO_Init+0x184>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b42      	ldr	r3, [pc, #264]	@ (800182c <MX_GPIO_Init+0x184>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b3e      	ldr	r3, [pc, #248]	@ (800182c <MX_GPIO_Init+0x184>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a3d      	ldr	r2, [pc, #244]	@ (800182c <MX_GPIO_Init+0x184>)
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <MX_GPIO_Init+0x184>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b37      	ldr	r3, [pc, #220]	@ (800182c <MX_GPIO_Init+0x184>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a36      	ldr	r2, [pc, #216]	@ (800182c <MX_GPIO_Init+0x184>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b34      	ldr	r3, [pc, #208]	@ (800182c <MX_GPIO_Init+0x184>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b30      	ldr	r3, [pc, #192]	@ (800182c <MX_GPIO_Init+0x184>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a2f      	ldr	r2, [pc, #188]	@ (800182c <MX_GPIO_Init+0x184>)
 8001770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <MX_GPIO_Init+0x184>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b29      	ldr	r3, [pc, #164]	@ (800182c <MX_GPIO_Init+0x184>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a28      	ldr	r2, [pc, #160]	@ (800182c <MX_GPIO_Init+0x184>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b26      	ldr	r3, [pc, #152]	@ (800182c <MX_GPIO_Init+0x184>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80017a4:	4822      	ldr	r0, [pc, #136]	@ (8001830 <MX_GPIO_Init+0x188>)
 80017a6:	f001 f9a5 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2140      	movs	r1, #64	@ 0x40
 80017ae:	4821      	ldr	r0, [pc, #132]	@ (8001834 <MX_GPIO_Init+0x18c>)
 80017b0:	f001 f9a0 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	481b      	ldr	r0, [pc, #108]	@ (8001838 <MX_GPIO_Init+0x190>)
 80017cc:	f000 fffe 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017d0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4811      	ldr	r0, [pc, #68]	@ (8001830 <MX_GPIO_Init+0x188>)
 80017ea:	f000 ffef 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017ee:	2340      	movs	r3, #64	@ 0x40
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	480b      	ldr	r0, [pc, #44]	@ (8001834 <MX_GPIO_Init+0x18c>)
 8001806:	f000 ffe1 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_GPIO_Init+0x18c>)
 800181e:	f000 ffd5 	bl	80027cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001822:	bf00      	nop
 8001824:	3738      	adds	r7, #56	@ 0x38
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400
 8001834:	40021800 	.word	0x40021800
 8001838:	40020800 	.word	0x40020800

0800183c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
}
 8001842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <Error_Handler+0x8>

08001848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_MspInit+0x4c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <HAL_MspInit+0x4c>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_MspInit+0x4c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_MspInit+0x4c>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <HAL_ADC_MspInit+0x7c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d127      	bne.n	800190a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <HAL_ADC_MspInit+0x80>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <HAL_ADC_MspInit+0x80>)
 80018c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <HAL_ADC_MspInit+0x80>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_ADC_MspInit+0x80>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <HAL_ADC_MspInit+0x80>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_ADC_MspInit+0x80>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018f2:	2320      	movs	r3, #32
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f6:	2303      	movs	r3, #3
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <HAL_ADC_MspInit+0x84>)
 8001906:	f000 ff61 	bl	80027cc <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	@ 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40012200 	.word	0x40012200
 8001918:	40023800 	.word	0x40023800
 800191c:	40021400 	.word	0x40021400

08001920 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	@ (80019a4 <HAL_I2C_MspInit+0x84>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12c      	bne.n	800199c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800195e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001964:	2312      	movs	r3, #18
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001970:	2304      	movs	r3, #4
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	480c      	ldr	r0, [pc, #48]	@ (80019ac <HAL_I2C_MspInit+0x8c>)
 800197c:	f000 ff26 	bl	80027cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 800198a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800198e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_I2C_MspInit+0x88>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	@ 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40005400 	.word	0x40005400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0b      	ldr	r2, [pc, #44]	@ (80019ec <HAL_TIM_PWM_MspInit+0x3c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10d      	bne.n	80019de <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x40>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x40>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x40>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <HAL_TIM_MspPostInit+0x68>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d11e      	bne.n	8001a54 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_TIM_MspPostInit+0x6c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	@ (8001a60 <HAL_TIM_MspPostInit+0x6c>)
 8001a20:	f043 0310 	orr.w	r3, r3, #16
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_TIM_MspPostInit+0x6c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <HAL_TIM_MspPostInit+0x70>)
 8001a50:	f000 febc 	bl	80027cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	@ (8001aec <HAL_UART_MspInit+0x84>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d12c      	bne.n	8001ae4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_UART_MspInit+0x88>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	4a17      	ldr	r2, [pc, #92]	@ (8001af0 <HAL_UART_MspInit+0x88>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_UART_MspInit+0x88>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_UART_MspInit+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a10      	ldr	r2, [pc, #64]	@ (8001af0 <HAL_UART_MspInit+0x88>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <HAL_UART_MspInit+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ac2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <HAL_UART_MspInit+0x8c>)
 8001ae0:	f000 fe74 	bl	80027cc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	@ 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40004800 	.word	0x40004800
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b0a0      	sub	sp, #128	@ 0x80
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	225c      	movs	r2, #92	@ 0x5c
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fdd9 	bl	80066d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b26:	d14e      	bne.n	8001bc6 <HAL_PCD_MspInit+0xce>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fa6e 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001b42:	f7ff fe7b 	bl	800183c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <HAL_PCD_MspInit+0xd8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a20      	ldr	r2, [pc, #128]	@ (8001bd0 <HAL_PCD_MspInit+0xd8>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd0 <HAL_PCD_MspInit+0xd8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b62:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b74:	230a      	movs	r3, #10
 8001b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4815      	ldr	r0, [pc, #84]	@ (8001bd4 <HAL_PCD_MspInit+0xdc>)
 8001b80:	f000 fe24 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b96:	4619      	mov	r1, r3
 8001b98:	480e      	ldr	r0, [pc, #56]	@ (8001bd4 <HAL_PCD_MspInit+0xdc>)
 8001b9a:	f000 fe17 	bl	80027cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <HAL_PCD_MspInit+0xd8>)
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd0 <HAL_PCD_MspInit+0xd8>)
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_PCD_MspInit+0xd8>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_PCD_MspInit+0xd8>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_PCD_MspInit+0xd8>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3780      	adds	r7, #128	@ 0x80
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <NMI_Handler+0x4>

08001be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <MemManage_Handler+0x4>

08001bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <UsageFault_Handler+0x4>

08001c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2e:	f000 f8c7 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f004 fd3a 	bl	80066e0 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20020000 	.word	0x20020000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	20000688 	.word	0x20000688
 8001ca0:	200007d8 	.word	0x200007d8

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ccc:	f7ff ffea 	bl	8001ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd2:	490d      	ldr	r1, [pc, #52]	@ (8001d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f004 fcf9 	bl	80066ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff fa0d 	bl	8001118 <main>
  bx  lr    
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d0c:	08007050 	.word	0x08007050
  ldr r2, =_sbss
 8001d10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d14:	200007d8 	.word	0x200007d8

08001d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <HAL_Init+0x40>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_Init+0x40>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	@ (8001d5c <HAL_Init+0x40>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 fd0d 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff fd7a 	bl	8001848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fd17 	bl	80027b2 <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d9c:	f000 fced 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	@ (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008
 8001de4:	2000068c 	.word	0x2000068c

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000068c 	.word	0x2000068c

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008

08001e48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e033      	b.n	8001ec6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fd16 	bl	8001898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e8e:	f023 0302 	bic.w	r3, r3, #2
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fab4 	bl	8002408 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eb6:	e001      	b.n	8001ebc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_Start+0x1a>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e0b2      	b.n	8002050 <HAL_ADC_Start+0x180>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d018      	beq.n	8001f32 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f10:	4b52      	ldr	r3, [pc, #328]	@ (800205c <HAL_ADC_Start+0x18c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a52      	ldr	r2, [pc, #328]	@ (8002060 <HAL_ADC_Start+0x190>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0c9a      	lsrs	r2, r3, #18
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f24:	e002      	b.n	8001f2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f9      	bne.n	8001f26 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d17a      	bne.n	8002036 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f6a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f7e:	d106      	bne.n	8001f8e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	f023 0206 	bic.w	r2, r3, #6
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_ADC_Start+0x194>)
 8001f9e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d12a      	bne.n	800200c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <HAL_ADC_Start+0x198>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d015      	beq.n	8001fec <HAL_ADC_Start+0x11c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a29      	ldr	r2, [pc, #164]	@ (800206c <HAL_ADC_Start+0x19c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_Start+0x106>
 8001fca:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <HAL_ADC_Start+0x194>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a25      	ldr	r2, [pc, #148]	@ (8002070 <HAL_ADC_Start+0x1a0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d136      	bne.n	800204e <HAL_ADC_Start+0x17e>
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HAL_ADC_Start+0x194>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d130      	bne.n	800204e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d129      	bne.n	800204e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	e020      	b.n	800204e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a15      	ldr	r2, [pc, #84]	@ (8002068 <HAL_ADC_Start+0x198>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d11b      	bne.n	800204e <HAL_ADC_Start+0x17e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d114      	bne.n	800204e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	e00b      	b.n	800204e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f043 0210 	orr.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	20000000 	.word	0x20000000
 8002060:	431bde83 	.word	0x431bde83
 8002064:	40012300 	.word	0x40012300
 8002068:	40012000 	.word	0x40012000
 800206c:	40012100 	.word	0x40012100
 8002070:	40012200 	.word	0x40012200

08002074 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002090:	d113      	bne.n	80020ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800209c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a0:	d10b      	bne.n	80020ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e063      	b.n	8002182 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ba:	f7ff fe95 	bl	8001de8 <HAL_GetTick>
 80020be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020c0:	e021      	b.n	8002106 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020c8:	d01d      	beq.n	8002106 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_ADC_PollForConversion+0x6c>
 80020d0:	f7ff fe8a 	bl	8001de8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d212      	bcs.n	8002106 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d00b      	beq.n	8002106 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e03d      	b.n	8002182 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d1d6      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0212 	mvn.w	r2, #18
 800211c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d123      	bne.n	8002180 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d11f      	bne.n	8002180 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002158:	2b00      	cmp	r3, #0
 800215a:	d111      	bne.n	8002180 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1c>
 80021bc:	2302      	movs	r3, #2
 80021be:	e113      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x244>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b09      	cmp	r3, #9
 80021ce:	d925      	bls.n	800221c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	3b1e      	subs	r3, #30
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43da      	mvns	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	400a      	ands	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68d9      	ldr	r1, [r3, #12]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	4603      	mov	r3, r0
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4403      	add	r3, r0
 800220e:	3b1e      	subs	r3, #30
 8002210:	409a      	lsls	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	e022      	b.n	8002262 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6919      	ldr	r1, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	2207      	movs	r2, #7
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	4603      	mov	r3, r0
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4403      	add	r3, r0
 8002258:	409a      	lsls	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d824      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b05      	subs	r3, #5
 800227c:	221f      	movs	r2, #31
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	400a      	ands	r2, r1
 800228a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b05      	subs	r3, #5
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80022b2:	e04c      	b.n	800234e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d824      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b23      	subs	r3, #35	@ 0x23
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43da      	mvns	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	400a      	ands	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b23      	subs	r3, #35	@ 0x23
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
 8002304:	e023      	b.n	800234e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b41      	subs	r3, #65	@ 0x41
 8002318:	221f      	movs	r2, #31
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	400a      	ands	r2, r1
 8002326:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b41      	subs	r3, #65	@ 0x41
 8002342:	fa00 f203 	lsl.w	r2, r0, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234e:	4b29      	ldr	r3, [pc, #164]	@ (80023f4 <HAL_ADC_ConfigChannel+0x250>)
 8002350:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a28      	ldr	r2, [pc, #160]	@ (80023f8 <HAL_ADC_ConfigChannel+0x254>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d10f      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d8>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b12      	cmp	r3, #18
 8002362:	d10b      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1d      	ldr	r2, [pc, #116]	@ (80023f8 <HAL_ADC_ConfigChannel+0x254>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d12b      	bne.n	80023de <HAL_ADC_ConfigChannel+0x23a>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1c      	ldr	r2, [pc, #112]	@ (80023fc <HAL_ADC_ConfigChannel+0x258>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d003      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x1f4>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b11      	cmp	r3, #17
 8002396:	d122      	bne.n	80023de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <HAL_ADC_ConfigChannel+0x258>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d111      	bne.n	80023de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_ADC_ConfigChannel+0x25c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a11      	ldr	r2, [pc, #68]	@ (8002404 <HAL_ADC_ConfigChannel+0x260>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9a      	lsrs	r2, r3, #18
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40012300 	.word	0x40012300
 80023f8:	40012000 	.word	0x40012000
 80023fc:	10000012 	.word	0x10000012
 8002400:	20000000 	.word	0x20000000
 8002404:	431bde83 	.word	0x431bde83

08002408 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002410:	4b79      	ldr	r3, [pc, #484]	@ (80025f8 <ADC_Init+0x1f0>)
 8002412:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	431a      	orrs	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800243c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	021a      	lsls	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249a:	4a58      	ldr	r2, [pc, #352]	@ (80025fc <ADC_Init+0x1f4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d022      	beq.n	80024e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6899      	ldr	r1, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e00f      	b.n	8002506 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002504:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0202 	bic.w	r2, r2, #2
 8002514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6899      	ldr	r1, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e1b      	ldrb	r3, [r3, #24]
 8002520:	005a      	lsls	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002542:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002552:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	3b01      	subs	r3, #1
 8002560:	035a      	lsls	r2, r3, #13
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	e007      	b.n	800257c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	3b01      	subs	r3, #1
 8002598:	051a      	lsls	r2, r3, #20
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025be:	025a      	lsls	r2, r3, #9
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	029a      	lsls	r2, r3, #10
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40012300 	.word	0x40012300
 80025fc:	0f000001 	.word	0x0f000001

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	@ (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	@ (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	@ 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
         );
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	@ 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff47 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff5c 	bl	8002648 <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff8e 	bl	80026b8 <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5d 	bl	8002664 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffb0 	bl	8002720 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	@ 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e165      	b.n	8002ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	f040 8154 	bne.w	8002aae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d005      	beq.n	800281e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800281a:	2b02      	cmp	r3, #2
 800281c:	d130      	bne.n	8002880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	2203      	movs	r2, #3
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 0201 	and.w	r2, r3, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b03      	cmp	r3, #3
 800288a:	d017      	beq.n	80028bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d123      	bne.n	8002910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	69b9      	ldr	r1, [r7, #24]
 800290c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0203 	and.w	r2, r3, #3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80ae 	beq.w	8002aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <HAL_GPIO_Init+0x300>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	4a5c      	ldr	r2, [pc, #368]	@ (8002acc <HAL_GPIO_Init+0x300>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002960:	6453      	str	r3, [r2, #68]	@ 0x44
 8002962:	4b5a      	ldr	r3, [pc, #360]	@ (8002acc <HAL_GPIO_Init+0x300>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296e:	4a58      	ldr	r2, [pc, #352]	@ (8002ad0 <HAL_GPIO_Init+0x304>)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	220f      	movs	r2, #15
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4f      	ldr	r2, [pc, #316]	@ (8002ad4 <HAL_GPIO_Init+0x308>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d025      	beq.n	80029e6 <HAL_GPIO_Init+0x21a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ad8 <HAL_GPIO_Init+0x30c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01f      	beq.n	80029e2 <HAL_GPIO_Init+0x216>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4d      	ldr	r2, [pc, #308]	@ (8002adc <HAL_GPIO_Init+0x310>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d019      	beq.n	80029de <HAL_GPIO_Init+0x212>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4c      	ldr	r2, [pc, #304]	@ (8002ae0 <HAL_GPIO_Init+0x314>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_GPIO_Init+0x20e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ae4 <HAL_GPIO_Init+0x318>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00d      	beq.n	80029d6 <HAL_GPIO_Init+0x20a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae8 <HAL_GPIO_Init+0x31c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <HAL_GPIO_Init+0x206>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a49      	ldr	r2, [pc, #292]	@ (8002aec <HAL_GPIO_Init+0x320>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_GPIO_Init+0x202>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e00c      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e00a      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029d2:	2305      	movs	r3, #5
 80029d4:	e008      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029d6:	2304      	movs	r3, #4
 80029d8:	e006      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029da:	2303      	movs	r3, #3
 80029dc:	e004      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029de:	2302      	movs	r3, #2
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029e6:	2300      	movs	r3, #0
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f002 0203 	and.w	r2, r2, #3
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4093      	lsls	r3, r2
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f8:	4935      	ldr	r1, [pc, #212]	@ (8002ad0 <HAL_GPIO_Init+0x304>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a06:	4b3a      	ldr	r3, [pc, #232]	@ (8002af0 <HAL_GPIO_Init+0x324>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2a:	4a31      	ldr	r2, [pc, #196]	@ (8002af0 <HAL_GPIO_Init+0x324>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a30:	4b2f      	ldr	r3, [pc, #188]	@ (8002af0 <HAL_GPIO_Init+0x324>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a54:	4a26      	ldr	r2, [pc, #152]	@ (8002af0 <HAL_GPIO_Init+0x324>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a5a:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_GPIO_Init+0x324>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002af0 <HAL_GPIO_Init+0x324>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a84:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <HAL_GPIO_Init+0x324>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa8:	4a11      	ldr	r2, [pc, #68]	@ (8002af0 <HAL_GPIO_Init+0x324>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	f67f ae96 	bls.w	80027e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	3724      	adds	r7, #36	@ 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40020400 	.word	0x40020400
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020c00 	.word	0x40020c00
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40021400 	.word	0x40021400
 8002aec:	40021800 	.word	0x40021800
 8002af0:	40013c00 	.word	0x40013c00

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e12b      	b.n	8002d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fee6 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	@ 0x24
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f001 fa1c 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 8002b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4a81      	ldr	r2, [pc, #516]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d807      	bhi.n	8002bac <HAL_I2C_Init+0x84>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a80      	ldr	r2, [pc, #512]	@ (8002da0 <HAL_I2C_Init+0x278>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	bf94      	ite	ls
 8002ba4:	2301      	movls	r3, #1
 8002ba6:	2300      	movhi	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e006      	b.n	8002bba <HAL_I2C_Init+0x92>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a7d      	ldr	r2, [pc, #500]	@ (8002da4 <HAL_I2C_Init+0x27c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	bf94      	ite	ls
 8002bb4:	2301      	movls	r3, #1
 8002bb6:	2300      	movhi	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0e7      	b.n	8002d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a78      	ldr	r2, [pc, #480]	@ (8002da8 <HAL_I2C_Init+0x280>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0c9b      	lsrs	r3, r3, #18
 8002bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d802      	bhi.n	8002bfc <HAL_I2C_Init+0xd4>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	e009      	b.n	8002c10 <HAL_I2C_Init+0xe8>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	4a69      	ldr	r2, [pc, #420]	@ (8002dac <HAL_I2C_Init+0x284>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	3301      	adds	r3, #1
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	495c      	ldr	r1, [pc, #368]	@ (8002d9c <HAL_I2C_Init+0x274>)
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	d819      	bhi.n	8002c64 <HAL_I2C_Init+0x13c>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e59      	subs	r1, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3e:	1c59      	adds	r1, r3, #1
 8002c40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c44:	400b      	ands	r3, r1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_I2C_Init+0x138>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1e59      	subs	r1, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5e:	e051      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e04f      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d111      	bne.n	8002c90 <HAL_I2C_Init+0x168>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e58      	subs	r0, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	440b      	add	r3, r1
 8002c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e012      	b.n	8002cb6 <HAL_I2C_Init+0x18e>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e58      	subs	r0, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	0099      	lsls	r1, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Init+0x196>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e022      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_I2C_Init+0x1bc>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1e58      	subs	r0, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	440b      	add	r3, r1
 8002cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce2:	e00f      	b.n	8002d04 <HAL_I2C_Init+0x1dc>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	0099      	lsls	r1, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	6809      	ldr	r1, [r1, #0]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6911      	ldr	r1, [r2, #16]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d2      	ldr	r2, [r2, #12]
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	000186a0 	.word	0x000186a0
 8002da0:	001e847f 	.word	0x001e847f
 8002da4:	003d08ff 	.word	0x003d08ff
 8002da8:	431bde83 	.word	0x431bde83
 8002dac:	10624dd3 	.word	0x10624dd3

08002db0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	813b      	strh	r3, [r7, #8]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dca:	f7ff f80d 	bl	8001de8 <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	f040 80d9 	bne.w	8002f90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2319      	movs	r3, #25
 8002de4:	2201      	movs	r2, #1
 8002de6:	496d      	ldr	r1, [pc, #436]	@ (8002f9c <HAL_I2C_Mem_Write+0x1ec>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fc8b 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
 8002df6:	e0cc      	b.n	8002f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Mem_Write+0x56>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0c5      	b.n	8002f92 <HAL_I2C_Mem_Write+0x1e2>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d007      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2221      	movs	r2, #33	@ 0x21
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2240      	movs	r2, #64	@ 0x40
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a3a      	ldr	r2, [r7, #32]
 8002e56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a4d      	ldr	r2, [pc, #308]	@ (8002fa0 <HAL_I2C_Mem_Write+0x1f0>)
 8002e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e6e:	88f8      	ldrh	r0, [r7, #6]
 8002e70:	893a      	ldrh	r2, [r7, #8]
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fac2 	bl	8003408 <I2C_RequestMemoryWrite>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d052      	beq.n	8002f30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e081      	b.n	8002f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fd50 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d107      	bne.n	8002eb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06b      	b.n	8002f92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d11b      	bne.n	8002f30 <HAL_I2C_Mem_Write+0x180>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d017      	beq.n	8002f30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1aa      	bne.n	8002e8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fd43 	bl	80039c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d107      	bne.n	8002f60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e016      	b.n	8002f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	00100002 	.word	0x00100002
 8002fa0:	ffff0000 	.word	0xffff0000

08002fa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	@ 0x30
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	813b      	strh	r3, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fbe:	f7fe ff13 	bl	8001de8 <HAL_GetTick>
 8002fc2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	f040 8214 	bne.w	80033fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2319      	movs	r3, #25
 8002fd8:	2201      	movs	r2, #1
 8002fda:	497b      	ldr	r1, [pc, #492]	@ (80031c8 <HAL_I2C_Mem_Read+0x224>)
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fb91 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e207      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_Mem_Read+0x56>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e200      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d007      	beq.n	8003020 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2222      	movs	r2, #34	@ 0x22
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800304a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a5b      	ldr	r2, [pc, #364]	@ (80031cc <HAL_I2C_Mem_Read+0x228>)
 8003060:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003062:	88f8      	ldrh	r0, [r7, #6]
 8003064:	893a      	ldrh	r2, [r7, #8]
 8003066:	8979      	ldrh	r1, [r7, #10]
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4603      	mov	r3, r0
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa5e 	bl	8003534 <I2C_RequestMemoryRead>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e1bc      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d113      	bne.n	80030b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	623b      	str	r3, [r7, #32]
 800309e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	e190      	b.n	80033d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d11b      	bne.n	80030f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e170      	b.n	80033d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d11b      	bne.n	8003132 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003108:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	e150      	b.n	80033d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003148:	e144      	b.n	80033d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314e:	2b03      	cmp	r3, #3
 8003150:	f200 80f1 	bhi.w	8003336 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	2b01      	cmp	r3, #1
 800315a:	d123      	bne.n	80031a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fc79 	bl	8003a58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e145      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031a2:	e117      	b.n	80033d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d14e      	bne.n	800324a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b2:	2200      	movs	r2, #0
 80031b4:	4906      	ldr	r1, [pc, #24]	@ (80031d0 <HAL_I2C_Mem_Read+0x22c>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 faa4 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e11a      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
 80031c6:	bf00      	nop
 80031c8:	00100002 	.word	0x00100002
 80031cc:	ffff0000 	.word	0xffff0000
 80031d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003248:	e0c4      	b.n	80033d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	2200      	movs	r2, #0
 8003252:	496c      	ldr	r1, [pc, #432]	@ (8003404 <HAL_I2C_Mem_Read+0x460>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fa55 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cb      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	2200      	movs	r2, #0
 80032ae:	4955      	ldr	r1, [pc, #340]	@ (8003404 <HAL_I2C_Mem_Read+0x460>)
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fa27 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e09d      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003334:	e04e      	b.n	80033d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fb8c 	bl	8003a58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e058      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d124      	bne.n	80033d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338e:	2b03      	cmp	r3, #3
 8003390:	d107      	bne.n	80033a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f aeb6 	bne.w	800314a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	@ 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	00010004 	.word	0x00010004

08003408 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003430:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2200      	movs	r2, #0
 800343a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f960 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003458:	d103      	bne.n	8003462 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e05f      	b.n	8003526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003474:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	492d      	ldr	r1, [pc, #180]	@ (8003530 <I2C_RequestMemoryWrite+0x128>)
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f9bb 	bl	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e04c      	b.n	8003526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a4:	6a39      	ldr	r1, [r7, #32]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fa46 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d107      	bne.n	80034ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e02b      	b.n	8003526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034d4:	893b      	ldrh	r3, [r7, #8]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	611a      	str	r2, [r3, #16]
 80034de:	e021      	b.n	8003524 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034e0:	893b      	ldrh	r3, [r7, #8]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f0:	6a39      	ldr	r1, [r7, #32]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fa20 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2b04      	cmp	r3, #4
 8003504:	d107      	bne.n	8003516 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003514:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e005      	b.n	8003526 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800351a:	893b      	ldrh	r3, [r7, #8]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	00010002 	.word	0x00010002

08003534 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4603      	mov	r3, r0
 8003544:	817b      	strh	r3, [r7, #10]
 8003546:	460b      	mov	r3, r1
 8003548:	813b      	strh	r3, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800355c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800356c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	2200      	movs	r2, #0
 8003576:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f8c2 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003594:	d103      	bne.n	800359e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800359c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0aa      	b.n	80036f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	4952      	ldr	r1, [pc, #328]	@ (8003700 <I2C_RequestMemoryRead+0x1cc>)
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f91d 	bl	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e097      	b.n	80036f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e0:	6a39      	ldr	r1, [r7, #32]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f9a8 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d107      	bne.n	8003606 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e076      	b.n	80036f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]
 800361a:	e021      	b.n	8003660 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	b29b      	uxth	r3, r3
 8003622:	b2da      	uxtb	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362c:	6a39      	ldr	r1, [r7, #32]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f982 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	2b04      	cmp	r3, #4
 8003640:	d107      	bne.n	8003652 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e050      	b.n	80036f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003656:	893b      	ldrh	r3, [r7, #8]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003662:	6a39      	ldr	r1, [r7, #32]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f967 	bl	8003938 <I2C_WaitOnTXEFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	2b04      	cmp	r3, #4
 8003676:	d107      	bne.n	8003688 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003686:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e035      	b.n	80036f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800369a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f82b 	bl	8003704 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c2:	d103      	bne.n	80036cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e013      	b.n	80036f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	4906      	ldr	r1, [pc, #24]	@ (8003700 <I2C_RequestMemoryRead+0x1cc>)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f886 	bl	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	00010002 	.word	0x00010002

08003704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003714:	e048      	b.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800371c:	d044      	beq.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371e:	f7fe fb63 	bl	8001de8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d139      	bne.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	0c1b      	lsrs	r3, r3, #16
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d10d      	bne.n	800375a <I2C_WaitOnFlagUntilTimeout+0x56>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	e00c      	b.n	8003774 <I2C_WaitOnFlagUntilTimeout+0x70>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	43da      	mvns	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	429a      	cmp	r2, r3
 8003778:	d116      	bne.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e023      	b.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	0c1b      	lsrs	r3, r3, #16
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10d      	bne.n	80037ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	e00c      	b.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	43da      	mvns	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4013      	ands	r3, r2
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d093      	beq.n	8003716 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003806:	e071      	b.n	80038ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003816:	d123      	bne.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003826:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003830:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e067      	b.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003866:	d041      	beq.n	80038ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7fe fabe 	bl	8001de8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d136      	bne.n	80038ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d10c      	bne.n	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4013      	ands	r3, r2
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	bf14      	ite	ne
 800389a:	2301      	movne	r3, #1
 800389c:	2300      	moveq	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	e00b      	b.n	80038ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	43da      	mvns	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4013      	ands	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d016      	beq.n	80038ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e021      	b.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d10c      	bne.n	8003910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	43da      	mvns	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4013      	ands	r3, r2
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e00b      	b.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4013      	ands	r3, r2
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	bf14      	ite	ne
 8003922:	2301      	movne	r3, #1
 8003924:	2300      	moveq	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	f47f af6d 	bne.w	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003944:	e034      	b.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f8e3 	bl	8003b12 <I2C_IsAcknowledgeFailed>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e034      	b.n	80039c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800395c:	d028      	beq.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fe fa43 	bl	8001de8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d11d      	bne.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397e:	2b80      	cmp	r3, #128	@ 0x80
 8003980:	d016      	beq.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e007      	b.n	80039c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d1c3      	bne.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d4:	e034      	b.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f89b 	bl	8003b12 <I2C_IsAcknowledgeFailed>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e034      	b.n	8003a50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ec:	d028      	beq.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7fe f9fb 	bl	8001de8 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11d      	bne.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d016      	beq.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e007      	b.n	8003a50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d1c3      	bne.n	80039d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a64:	e049      	b.n	8003afa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d119      	bne.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0210 	mvn.w	r2, #16
 8003a7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e030      	b.n	8003b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa8:	f7fe f99e 	bl	8001de8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d11d      	bne.n	8003afa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac8:	2b40      	cmp	r3, #64	@ 0x40
 8003aca:	d016      	beq.n	8003afa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e007      	b.n	8003b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b04:	2b40      	cmp	r3, #64	@ 0x40
 8003b06:	d1ae      	bne.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b28:	d11b      	bne.n	8003b62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	f043 0204 	orr.w	r2, r3, #4
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e108      	b.n	8003d94 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fd ffab 	bl	8001af8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 facf 	bl	8006160 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7c1a      	ldrb	r2, [r3, #16]
 8003bca:	f88d 2000 	strb.w	r2, [sp]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd2:	f002 fa61 	bl	8006098 <USB_CoreInit>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0d5      	b.n	8003d94 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 fac7 	bl	8006182 <USB_SetCurrentMode>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0c6      	b.n	8003d94 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e04a      	b.n	8003ca2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3315      	adds	r3, #21
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3314      	adds	r3, #20
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	b298      	uxth	r0, r3
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	332e      	adds	r3, #46	@ 0x2e
 8003c48:	4602      	mov	r2, r0
 8003c4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	331c      	adds	r3, #28
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3320      	adds	r3, #32
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3324      	adds	r3, #36	@ 0x24
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	791b      	ldrb	r3, [r3, #4]
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d3af      	bcc.n	8003c0c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e044      	b.n	8003d3c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d20:	7bfa      	ldrb	r2, [r7, #15]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	791b      	ldrb	r3, [r3, #4]
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3b5      	bcc.n	8003cb2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7c1a      	ldrb	r2, [r3, #16]
 8003d4e:	f88d 2000 	strb.w	r2, [sp]
 8003d52:	3304      	adds	r3, #4
 8003d54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d56:	f002 fa61 	bl	800621c <USB_DevInit>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e013      	b.n	8003d94 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7b1b      	ldrb	r3, [r3, #12]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d102      	bne.n	8003d88 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f80a 	bl	8003d9c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f002 fc1c 	bl	80065ca <USB_DevDisconnect>

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	f043 0303 	orr.w	r3, r3, #3
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0cc      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b68      	ldr	r3, [pc, #416]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d90c      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b65      	ldr	r3, [pc, #404]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b63      	ldr	r3, [pc, #396]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	4b59      	ldr	r3, [pc, #356]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e50:	4b53      	ldr	r3, [pc, #332]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a52      	ldr	r2, [pc, #328]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	494d      	ldr	r1, [pc, #308]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d044      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b47      	ldr	r3, [pc, #284]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d119      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e067      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b37      	ldr	r3, [pc, #220]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4934      	ldr	r1, [pc, #208]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed4:	f7fd ff88 	bl	8001de8 <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fd ff84 	bl	8001de8 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e04f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 020c 	and.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1eb      	bne.n	8003edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f04:	4b25      	ldr	r3, [pc, #148]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d20c      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b22      	ldr	r3, [pc, #136]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b20      	ldr	r3, [pc, #128]	@ (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e032      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4916      	ldr	r1, [pc, #88]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f56:	4b12      	ldr	r3, [pc, #72]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 fb7f 	bl	800466c <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	@ (8003fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	@ (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fee8 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023c00 	.word	0x40023c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	08006ff4 	.word	0x08006ff4
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	20000004 	.word	0x20000004

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	@ (8003fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000000 	.word	0x20000000

08003fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fcc:	f7ff fff0 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	0a9b      	lsrs	r3, r3, #10
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4903      	ldr	r1, [pc, #12]	@ (8003fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	08007004 	.word	0x08007004

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff4:	f7ff ffdc 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0b5b      	lsrs	r3, r3, #13
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	@ (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	08007004 	.word	0x08007004

08004018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08c      	sub	sp, #48	@ 0x30
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d010      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004050:	4b6f      	ldr	r3, [pc, #444]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004056:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	496c      	ldr	r1, [pc, #432]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800406e:	2301      	movs	r3, #1
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800407e:	4b64      	ldr	r3, [pc, #400]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004084:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	4960      	ldr	r1, [pc, #384]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800409c:	2301      	movs	r3, #1
 800409e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d017      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ac:	4b58      	ldr	r3, [pc, #352]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	4955      	ldr	r1, [pc, #340]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ca:	d101      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80040cc:	2301      	movs	r3, #1
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80040d8:	2301      	movs	r3, #1
 80040da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d017      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040e8:	4b49      	ldr	r3, [pc, #292]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f6:	4946      	ldr	r1, [pc, #280]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004106:	d101      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004114:	2301      	movs	r3, #1
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 808a 	beq.w	800423a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	4b39      	ldr	r3, [pc, #228]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	4a38      	ldr	r2, [pc, #224]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	@ 0x40
 8004136:	4b36      	ldr	r3, [pc, #216]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004142:	4b34      	ldr	r3, [pc, #208]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a33      	ldr	r2, [pc, #204]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800414c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800414e:	f7fd fe4b 	bl	8001de8 <HAL_GetTick>
 8004152:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fd fe47 	bl	8001de8 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e278      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004168:	4b2a      	ldr	r3, [pc, #168]	@ (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004174:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800417c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d02f      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418c:	6a3a      	ldr	r2, [r7, #32]
 800418e:	429a      	cmp	r2, r3
 8004190:	d028      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004192:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800419a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800419c:	4b1e      	ldr	r3, [pc, #120]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041a8:	4a19      	ldr	r2, [pc, #100]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041ae:	4b18      	ldr	r3, [pc, #96]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d114      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fd fe15 	bl	8001de8 <HAL_GetTick>
 80041be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd fe11 	bl	8001de8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e240      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ee      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041f0:	d114      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80041f2:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004206:	4902      	ldr	r1, [pc, #8]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]
 800420c:	e00c      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	40007000 	.word	0x40007000
 8004218:	42470e40 	.word	0x42470e40
 800421c:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a49      	ldr	r2, [pc, #292]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004222:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004226:	6093      	str	r3, [r2, #8]
 8004228:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800422a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	4944      	ldr	r1, [pc, #272]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004236:	4313      	orrs	r3, r2
 8004238:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800424c:	4b3f      	ldr	r3, [pc, #252]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800424e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800425c:	4b3a      	ldr	r3, [pc, #232]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004262:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426a:	4937      	ldr	r1, [pc, #220]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800427e:	4b32      	ldr	r3, [pc, #200]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004284:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800428c:	492e      	ldr	r1, [pc, #184]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042a0:	4b29      	ldr	r3, [pc, #164]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ae:	4926      	ldr	r1, [pc, #152]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042be:	d101      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80042c0:	2301      	movs	r3, #1
 80042c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80042d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	491a      	ldr	r1, [pc, #104]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d011      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80042f2:	4b15      	ldr	r3, [pc, #84]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004300:	4911      	ldr	r1, [pc, #68]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004310:	d101      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004312:	2301      	movs	r3, #1
 8004314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d005      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004324:	f040 80ff 	bne.w	8004526 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800432e:	f7fd fd5b 	bl	8001de8 <HAL_GetTick>
 8004332:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004334:	e00e      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004336:	f7fd fd57 	bl	8001de8 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d907      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e188      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004348:	40023800 	.word	0x40023800
 800434c:	424711e0 	.word	0x424711e0
 8004350:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004354:	4b7e      	ldr	r3, [pc, #504]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ea      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800437c:	2b00      	cmp	r3, #0
 800437e:	d028      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d124      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004388:	4b71      	ldr	r3, [pc, #452]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	3301      	adds	r3, #1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800439a:	4b6d      	ldr	r3, [pc, #436]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043a0:	0e1b      	lsrs	r3, r3, #24
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	019b      	lsls	r3, r3, #6
 80043b2:	431a      	orrs	r2, r3
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	3b01      	subs	r3, #1
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	431a      	orrs	r2, r3
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	071b      	lsls	r3, r3, #28
 80043ca:	4961      	ldr	r1, [pc, #388]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d035      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043fc:	d130      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80043fe:	4b54      	ldr	r3, [pc, #336]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	3301      	adds	r3, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004410:	4b4f      	ldr	r3, [pc, #316]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004416:	0f1b      	lsrs	r3, r3, #28
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	431a      	orrs	r2, r3
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	431a      	orrs	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	071b      	lsls	r3, r3, #28
 8004440:	4943      	ldr	r1, [pc, #268]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004448:	4b41      	ldr	r3, [pc, #260]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800444a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800444e:	f023 021f 	bic.w	r2, r3, #31
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	493d      	ldr	r1, [pc, #244]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d029      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004474:	d124      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004476:	4b36      	ldr	r3, [pc, #216]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	3301      	adds	r3, #1
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004488:	4b31      	ldr	r3, [pc, #196]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800448e:	0f1b      	lsrs	r3, r3, #28
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	019b      	lsls	r3, r3, #6
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	431a      	orrs	r2, r3
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	431a      	orrs	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	071b      	lsls	r3, r3, #28
 80044b8:	4925      	ldr	r1, [pc, #148]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d016      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	3b01      	subs	r3, #1
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	071b      	lsls	r3, r3, #28
 80044f2:	4917      	ldr	r1, [pc, #92]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044fa:	4b16      	ldr	r3, [pc, #88]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004500:	f7fd fc72 	bl	8001de8 <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004508:	f7fd fc6e 	bl	8001de8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e09f      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 8095 	bne.w	8004658 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800452e:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004534:	f7fd fc58 	bl	8001de8 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800453a:	e00f      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800453c:	f7fd fc54 	bl	8001de8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d908      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e085      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	42470068 	.word	0x42470068
 8004558:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800455c:	4b41      	ldr	r3, [pc, #260]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004568:	d0e8      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004586:	2b00      	cmp	r3, #0
 8004588:	d02b      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	2b00      	cmp	r3, #0
 8004590:	d127      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004592:	4b34      	ldr	r3, [pc, #208]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	3301      	adds	r3, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	431a      	orrs	r2, r3
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	3b01      	subs	r3, #1
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	061b      	lsls	r3, r3, #24
 80045c0:	4928      	ldr	r1, [pc, #160]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045c8:	4b26      	ldr	r3, [pc, #152]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045ce:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	3b01      	subs	r3, #1
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	4922      	ldr	r1, [pc, #136]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01d      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045f6:	d118      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	0e1b      	lsrs	r3, r3, #24
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	019b      	lsls	r3, r3, #6
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	3b01      	subs	r3, #1
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	4910      	ldr	r1, [pc, #64]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800462a:	4b0f      	ldr	r3, [pc, #60]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004630:	f7fd fbda 	bl	8001de8 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004636:	e008      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004638:	f7fd fbd6 	bl	8001de8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e007      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800464a:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004656:	d1ef      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3730      	adds	r7, #48	@ 0x30
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	42470070 	.word	0x42470070

0800466c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800466c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004670:	b0ae      	sub	sp, #184	@ 0xb8
 8004672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004692:	4bcb      	ldr	r3, [pc, #812]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b0c      	cmp	r3, #12
 800469c:	f200 8206 	bhi.w	8004aac <HAL_RCC_GetSysClockFreq+0x440>
 80046a0:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	08004aad 	.word	0x08004aad
 80046b0:	08004aad 	.word	0x08004aad
 80046b4:	08004aad 	.word	0x08004aad
 80046b8:	080046e5 	.word	0x080046e5
 80046bc:	08004aad 	.word	0x08004aad
 80046c0:	08004aad 	.word	0x08004aad
 80046c4:	08004aad 	.word	0x08004aad
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	08004aad 	.word	0x08004aad
 80046d0:	08004aad 	.word	0x08004aad
 80046d4:	08004aad 	.word	0x08004aad
 80046d8:	080048dd 	.word	0x080048dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4bb9      	ldr	r3, [pc, #740]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80046de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046e2:	e1e7      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e4:	4bb8      	ldr	r3, [pc, #736]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80046e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046ea:	e1e3      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ec:	4bb4      	ldr	r3, [pc, #720]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f8:	4bb1      	ldr	r3, [pc, #708]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d071      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004704:	4bae      	ldr	r3, [pc, #696]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	099b      	lsrs	r3, r3, #6
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004710:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004714:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	f04f 0000 	mov.w	r0, #0
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	0159      	lsls	r1, r3, #5
 8004738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800473c:	0150      	lsls	r0, r2, #5
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4621      	mov	r1, r4
 8004744:	1a51      	subs	r1, r2, r1
 8004746:	6439      	str	r1, [r7, #64]	@ 0x40
 8004748:	4629      	mov	r1, r5
 800474a:	eb63 0301 	sbc.w	r3, r3, r1
 800474e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800475c:	4649      	mov	r1, r9
 800475e:	018b      	lsls	r3, r1, #6
 8004760:	4641      	mov	r1, r8
 8004762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004766:	4641      	mov	r1, r8
 8004768:	018a      	lsls	r2, r1, #6
 800476a:	4641      	mov	r1, r8
 800476c:	1a51      	subs	r1, r2, r1
 800476e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004770:	4649      	mov	r1, r9
 8004772:	eb63 0301 	sbc.w	r3, r3, r1
 8004776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004784:	4649      	mov	r1, r9
 8004786:	00cb      	lsls	r3, r1, #3
 8004788:	4641      	mov	r1, r8
 800478a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478e:	4641      	mov	r1, r8
 8004790:	00ca      	lsls	r2, r1, #3
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	4603      	mov	r3, r0
 8004798:	4622      	mov	r2, r4
 800479a:	189b      	adds	r3, r3, r2
 800479c:	633b      	str	r3, [r7, #48]	@ 0x30
 800479e:	462b      	mov	r3, r5
 80047a0:	460a      	mov	r2, r1
 80047a2:	eb42 0303 	adc.w	r3, r2, r3
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047b4:	4629      	mov	r1, r5
 80047b6:	024b      	lsls	r3, r1, #9
 80047b8:	4621      	mov	r1, r4
 80047ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047be:	4621      	mov	r1, r4
 80047c0:	024a      	lsls	r2, r1, #9
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80047d8:	f7fc f990 	bl	8000afc <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047e6:	e067      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e8:	4b75      	ldr	r3, [pc, #468]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80047f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004800:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004802:	2300      	movs	r3, #0
 8004804:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004806:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800480a:	4622      	mov	r2, r4
 800480c:	462b      	mov	r3, r5
 800480e:	f04f 0000 	mov.w	r0, #0
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	0159      	lsls	r1, r3, #5
 8004818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800481c:	0150      	lsls	r0, r2, #5
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4621      	mov	r1, r4
 8004824:	1a51      	subs	r1, r2, r1
 8004826:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004828:	4629      	mov	r1, r5
 800482a:	eb63 0301 	sbc.w	r3, r3, r1
 800482e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800483c:	4649      	mov	r1, r9
 800483e:	018b      	lsls	r3, r1, #6
 8004840:	4641      	mov	r1, r8
 8004842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004846:	4641      	mov	r1, r8
 8004848:	018a      	lsls	r2, r1, #6
 800484a:	4641      	mov	r1, r8
 800484c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004850:	4649      	mov	r1, r9
 8004852:	eb63 0b01 	sbc.w	fp, r3, r1
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004862:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800486a:	4692      	mov	sl, r2
 800486c:	469b      	mov	fp, r3
 800486e:	4623      	mov	r3, r4
 8004870:	eb1a 0303 	adds.w	r3, sl, r3
 8004874:	623b      	str	r3, [r7, #32]
 8004876:	462b      	mov	r3, r5
 8004878:	eb4b 0303 	adc.w	r3, fp, r3
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800488a:	4629      	mov	r1, r5
 800488c:	028b      	lsls	r3, r1, #10
 800488e:	4621      	mov	r1, r4
 8004890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004894:	4621      	mov	r1, r4
 8004896:	028a      	lsls	r2, r1, #10
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048a0:	2200      	movs	r2, #0
 80048a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80048a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80048a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80048aa:	f7fc f927 	bl	8000afc <__aeabi_uldivmod>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4613      	mov	r3, r2
 80048b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048b8:	4b41      	ldr	r3, [pc, #260]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80048ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048da:	e0eb      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048dc:	4b38      	ldr	r3, [pc, #224]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048e8:	4b35      	ldr	r3, [pc, #212]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d06b      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f4:	4b32      	ldr	r3, [pc, #200]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	2200      	movs	r2, #0
 80048fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004906:	663b      	str	r3, [r7, #96]	@ 0x60
 8004908:	2300      	movs	r3, #0
 800490a:	667b      	str	r3, [r7, #100]	@ 0x64
 800490c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004910:	4622      	mov	r2, r4
 8004912:	462b      	mov	r3, r5
 8004914:	f04f 0000 	mov.w	r0, #0
 8004918:	f04f 0100 	mov.w	r1, #0
 800491c:	0159      	lsls	r1, r3, #5
 800491e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004922:	0150      	lsls	r0, r2, #5
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4621      	mov	r1, r4
 800492a:	1a51      	subs	r1, r2, r1
 800492c:	61b9      	str	r1, [r7, #24]
 800492e:	4629      	mov	r1, r5
 8004930:	eb63 0301 	sbc.w	r3, r3, r1
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004942:	4659      	mov	r1, fp
 8004944:	018b      	lsls	r3, r1, #6
 8004946:	4651      	mov	r1, sl
 8004948:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800494c:	4651      	mov	r1, sl
 800494e:	018a      	lsls	r2, r1, #6
 8004950:	4651      	mov	r1, sl
 8004952:	ebb2 0801 	subs.w	r8, r2, r1
 8004956:	4659      	mov	r1, fp
 8004958:	eb63 0901 	sbc.w	r9, r3, r1
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004968:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004970:	4690      	mov	r8, r2
 8004972:	4699      	mov	r9, r3
 8004974:	4623      	mov	r3, r4
 8004976:	eb18 0303 	adds.w	r3, r8, r3
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	462b      	mov	r3, r5
 800497e:	eb49 0303 	adc.w	r3, r9, r3
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004990:	4629      	mov	r1, r5
 8004992:	024b      	lsls	r3, r1, #9
 8004994:	4621      	mov	r1, r4
 8004996:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800499a:	4621      	mov	r1, r4
 800499c:	024a      	lsls	r2, r1, #9
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049a6:	2200      	movs	r2, #0
 80049a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80049ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049b0:	f7fc f8a4 	bl	8000afc <__aeabi_uldivmod>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4613      	mov	r3, r2
 80049ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049be:	e065      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x420>
 80049c0:	40023800 	.word	0x40023800
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049cc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x458>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	099b      	lsrs	r3, r3, #6
 80049d2:	2200      	movs	r2, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	4611      	mov	r1, r2
 80049d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80049de:	2300      	movs	r3, #0
 80049e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80049e6:	4642      	mov	r2, r8
 80049e8:	464b      	mov	r3, r9
 80049ea:	f04f 0000 	mov.w	r0, #0
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	0159      	lsls	r1, r3, #5
 80049f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f8:	0150      	lsls	r0, r2, #5
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4641      	mov	r1, r8
 8004a00:	1a51      	subs	r1, r2, r1
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	4649      	mov	r1, r9
 8004a06:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004a18:	4659      	mov	r1, fp
 8004a1a:	018b      	lsls	r3, r1, #6
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a22:	4651      	mov	r1, sl
 8004a24:	018a      	lsls	r2, r1, #6
 8004a26:	4651      	mov	r1, sl
 8004a28:	1a54      	subs	r4, r2, r1
 8004a2a:	4659      	mov	r1, fp
 8004a2c:	eb63 0501 	sbc.w	r5, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	00eb      	lsls	r3, r5, #3
 8004a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a3e:	00e2      	lsls	r2, r4, #3
 8004a40:	4614      	mov	r4, r2
 8004a42:	461d      	mov	r5, r3
 8004a44:	4643      	mov	r3, r8
 8004a46:	18e3      	adds	r3, r4, r3
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	eb45 0303 	adc.w	r3, r5, r3
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	028b      	lsls	r3, r1, #10
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a68:	4621      	mov	r1, r4
 8004a6a:	028a      	lsls	r2, r1, #10
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a74:	2200      	movs	r2, #0
 8004a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a7e:	f7fc f83d 	bl	8000afc <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4613      	mov	r3, r2
 8004a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0f1b      	lsrs	r3, r3, #28
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004aaa:	e003      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aac:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004aae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ab2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	37b8      	adds	r7, #184	@ 0xb8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	00f42400 	.word	0x00f42400

08004acc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e28d      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8083 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004aec:	4b94      	ldr	r3, [pc, #592]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d019      	beq.n	8004b2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004af8:	4b91      	ldr	r3, [pc, #580]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d106      	bne.n	8004b12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004b04:	4b8e      	ldr	r3, [pc, #568]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b10:	d00c      	beq.n	8004b2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b12:	4b8b      	ldr	r3, [pc, #556]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	d112      	bne.n	8004b44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1e:	4b88      	ldr	r3, [pc, #544]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b2a:	d10b      	bne.n	8004b44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	4b84      	ldr	r3, [pc, #528]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d05b      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x124>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d157      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e25a      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCC_OscConfig+0x90>
 8004b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a7b      	ldr	r2, [pc, #492]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e01d      	b.n	8004b98 <HAL_RCC_OscConfig+0xcc>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0xb4>
 8004b66:	4b76      	ldr	r3, [pc, #472]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a75      	ldr	r2, [pc, #468]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b73      	ldr	r3, [pc, #460]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a72      	ldr	r2, [pc, #456]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e00b      	b.n	8004b98 <HAL_RCC_OscConfig+0xcc>
 8004b80:	4b6f      	ldr	r3, [pc, #444]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6e      	ldr	r2, [pc, #440]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a6b      	ldr	r2, [pc, #428]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d013      	beq.n	8004bc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fd f922 	bl	8001de8 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fd f91e 	bl	8001de8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	@ 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e21f      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b61      	ldr	r3, [pc, #388]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xdc>
 8004bc6:	e014      	b.n	8004bf2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd f90e 	bl	8001de8 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fd f90a 	bl	8001de8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	@ 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e20b      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	4b57      	ldr	r3, [pc, #348]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x104>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d06f      	beq.n	8004cde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bfe:	4b50      	ldr	r3, [pc, #320]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d017      	beq.n	8004c3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c0a:	4b4d      	ldr	r3, [pc, #308]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d105      	bne.n	8004c22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c16:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b47      	ldr	r3, [pc, #284]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d11c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b44      	ldr	r3, [pc, #272]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	4b41      	ldr	r3, [pc, #260]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_RCC_OscConfig+0x186>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e1d3      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b3b      	ldr	r3, [pc, #236]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4937      	ldr	r1, [pc, #220]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	e03a      	b.n	8004cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b34      	ldr	r3, [pc, #208]	@ (8004d44 <HAL_RCC_OscConfig+0x278>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd f8b7 	bl	8001de8 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7e:	f7fd f8b3 	bl	8001de8 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1b4      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c90:	4b2b      	ldr	r3, [pc, #172]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b28      	ldr	r3, [pc, #160]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4925      	ldr	r1, [pc, #148]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb2:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <HAL_RCC_OscConfig+0x278>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd f896 	bl	8001de8 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7fd f892 	bl	8001de8 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e193      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d036      	beq.n	8004d58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <HAL_RCC_OscConfig+0x27c>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd f876 	bl	8001de8 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fd f872 	bl	8001de8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e173      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCC_OscConfig+0x274>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x234>
 8004d1e:	e01b      	b.n	8004d58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d20:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <HAL_RCC_OscConfig+0x27c>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d26:	f7fd f85f 	bl	8001de8 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	e00e      	b.n	8004d4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fd f85b 	bl	8001de8 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d907      	bls.n	8004d4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e15c      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	42470000 	.word	0x42470000
 8004d48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ea      	bne.n	8004d2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8097 	beq.w	8004e94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b83      	ldr	r3, [pc, #524]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d86:	4b7c      	ldr	r3, [pc, #496]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b79      	ldr	r3, [pc, #484]	@ (8004f7c <HAL_RCC_OscConfig+0x4b0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b76      	ldr	r3, [pc, #472]	@ (8004f7c <HAL_RCC_OscConfig+0x4b0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a75      	ldr	r2, [pc, #468]	@ (8004f7c <HAL_RCC_OscConfig+0x4b0>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd f81b 	bl	8001de8 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fd f817 	bl	8001de8 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e118      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8004f7c <HAL_RCC_OscConfig+0x4b0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x31e>
 8004ddc:	4b66      	ldr	r3, [pc, #408]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	4a65      	ldr	r2, [pc, #404]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de8:	e01c      	b.n	8004e24 <HAL_RCC_OscConfig+0x358>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x340>
 8004df2:	4b61      	ldr	r3, [pc, #388]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a60      	ldr	r2, [pc, #384]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfe:	4b5e      	ldr	r3, [pc, #376]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e02:	4a5d      	ldr	r2, [pc, #372]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0x358>
 8004e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a59      	ldr	r2, [pc, #356]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e18:	4b57      	ldr	r3, [pc, #348]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	4a56      	ldr	r2, [pc, #344]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e1e:	f023 0304 	bic.w	r3, r3, #4
 8004e22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fc ffdc 	bl	8001de8 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fc ffd8 	bl	8001de8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0d7      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RCC_OscConfig+0x368>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7fc ffc6 	bl	8001de8 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fc ffc2 	bl	8001de8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e0c1      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e76:	4b40      	ldr	r3, [pc, #256]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ee      	bne.n	8004e60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b3b      	ldr	r3, [pc, #236]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80ad 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e9e:	4b36      	ldr	r3, [pc, #216]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d060      	beq.n	8004f6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d145      	bne.n	8004f3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b33      	ldr	r3, [pc, #204]	@ (8004f80 <HAL_RCC_OscConfig+0x4b4>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fc ff96 	bl	8001de8 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fc ff92 	bl	8001de8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e093      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed2:	4b29      	ldr	r3, [pc, #164]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	491b      	ldr	r1, [pc, #108]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f10:	4b1b      	ldr	r3, [pc, #108]	@ (8004f80 <HAL_RCC_OscConfig+0x4b4>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f16:	f7fc ff67 	bl	8001de8 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1e:	f7fc ff63 	bl	8001de8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e064      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f30:	4b11      	ldr	r3, [pc, #68]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x452>
 8004f3c:	e05c      	b.n	8004ff8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3e:	4b10      	ldr	r3, [pc, #64]	@ (8004f80 <HAL_RCC_OscConfig+0x4b4>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc ff50 	bl	8001de8 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fc ff4c 	bl	8001de8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e04d      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x480>
 8004f6a:	e045      	b.n	8004ff8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e040      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f84:	4b1f      	ldr	r3, [pc, #124]	@ (8005004 <HAL_RCC_OscConfig+0x538>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d030      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d129      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d122      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d119      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d10f      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d107      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800

08005008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e041      	b.n	800509e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc fcbe 	bl	80019b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f000 f8f0 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0ae      	b.n	8005224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	f200 809f 	bhi.w	8005214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050d6:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005215 	.word	0x08005215
 80050e4:	08005215 	.word	0x08005215
 80050e8:	08005215 	.word	0x08005215
 80050ec:	08005151 	.word	0x08005151
 80050f0:	08005215 	.word	0x08005215
 80050f4:	08005215 	.word	0x08005215
 80050f8:	08005215 	.word	0x08005215
 80050fc:	08005193 	.word	0x08005193
 8005100:	08005215 	.word	0x08005215
 8005104:	08005215 	.word	0x08005215
 8005108:	08005215 	.word	0x08005215
 800510c:	080051d3 	.word	0x080051d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f934 	bl	8005384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0208 	orr.w	r2, r2, #8
 800512a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0204 	bic.w	r2, r2, #4
 800513a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6999      	ldr	r1, [r3, #24]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	619a      	str	r2, [r3, #24]
      break;
 800514e:	e064      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f984 	bl	8005464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800516a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800517a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6999      	ldr	r1, [r3, #24]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	619a      	str	r2, [r3, #24]
      break;
 8005190:	e043      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f9d9 	bl	8005550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0208 	orr.w	r2, r2, #8
 80051ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0204 	bic.w	r2, r2, #4
 80051bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69d9      	ldr	r1, [r3, #28]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	61da      	str	r2, [r3, #28]
      break;
 80051d0:	e023      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fa2d 	bl	8005638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69d9      	ldr	r1, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	021a      	lsls	r2, r3, #8
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	61da      	str	r2, [r3, #28]
      break;
 8005212:	e002      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
      break;
 8005218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005222:	7dfb      	ldrb	r3, [r7, #23]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a46      	ldr	r2, [pc, #280]	@ (8005358 <TIM_Base_SetConfig+0x12c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a43      	ldr	r2, [pc, #268]	@ (800535c <TIM_Base_SetConfig+0x130>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a42      	ldr	r2, [pc, #264]	@ (8005360 <TIM_Base_SetConfig+0x134>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a41      	ldr	r2, [pc, #260]	@ (8005364 <TIM_Base_SetConfig+0x138>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a40      	ldr	r2, [pc, #256]	@ (8005368 <TIM_Base_SetConfig+0x13c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a35      	ldr	r2, [pc, #212]	@ (8005358 <TIM_Base_SetConfig+0x12c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528c:	d027      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a32      	ldr	r2, [pc, #200]	@ (800535c <TIM_Base_SetConfig+0x130>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d023      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a31      	ldr	r2, [pc, #196]	@ (8005360 <TIM_Base_SetConfig+0x134>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a30      	ldr	r2, [pc, #192]	@ (8005364 <TIM_Base_SetConfig+0x138>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a2f      	ldr	r2, [pc, #188]	@ (8005368 <TIM_Base_SetConfig+0x13c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d017      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2e      	ldr	r2, [pc, #184]	@ (800536c <TIM_Base_SetConfig+0x140>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005370 <TIM_Base_SetConfig+0x144>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005374 <TIM_Base_SetConfig+0x148>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005378 <TIM_Base_SetConfig+0x14c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2a      	ldr	r2, [pc, #168]	@ (800537c <TIM_Base_SetConfig+0x150>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a29      	ldr	r2, [pc, #164]	@ (8005380 <TIM_Base_SetConfig+0x154>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a10      	ldr	r2, [pc, #64]	@ (8005358 <TIM_Base_SetConfig+0x12c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0xf8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a12      	ldr	r2, [pc, #72]	@ (8005368 <TIM_Base_SetConfig+0x13c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d105      	bne.n	800534a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	611a      	str	r2, [r3, #16]
  }
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40010000 	.word	0x40010000
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40010400 	.word	0x40010400
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400
 8005374:	40014800 	.word	0x40014800
 8005378:	40001800 	.word	0x40001800
 800537c:	40001c00 	.word	0x40001c00
 8005380:	40002000 	.word	0x40002000

08005384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f023 0201 	bic.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 0302 	bic.w	r3, r3, #2
 80053cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a20      	ldr	r2, [pc, #128]	@ (800545c <TIM_OC1_SetConfig+0xd8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_OC1_SetConfig+0x64>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005460 <TIM_OC1_SetConfig+0xdc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10c      	bne.n	8005402 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0308 	bic.w	r3, r3, #8
 80053ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 0304 	bic.w	r3, r3, #4
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a15      	ldr	r2, [pc, #84]	@ (800545c <TIM_OC1_SetConfig+0xd8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_OC1_SetConfig+0x8e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a14      	ldr	r2, [pc, #80]	@ (8005460 <TIM_OC1_SetConfig+0xdc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d111      	bne.n	8005436 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40010000 	.word	0x40010000
 8005460:	40010400 	.word	0x40010400

08005464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f023 0210 	bic.w	r2, r3, #16
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800549a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0320 	bic.w	r3, r3, #32
 80054ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a22      	ldr	r2, [pc, #136]	@ (8005548 <TIM_OC2_SetConfig+0xe4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC2_SetConfig+0x68>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a21      	ldr	r2, [pc, #132]	@ (800554c <TIM_OC2_SetConfig+0xe8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d10d      	bne.n	80054e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a17      	ldr	r2, [pc, #92]	@ (8005548 <TIM_OC2_SetConfig+0xe4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC2_SetConfig+0x94>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a16      	ldr	r2, [pc, #88]	@ (800554c <TIM_OC2_SetConfig+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d113      	bne.n	8005520 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40010000 	.word	0x40010000
 800554c:	40010400 	.word	0x40010400

08005550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a21      	ldr	r2, [pc, #132]	@ (8005630 <TIM_OC3_SetConfig+0xe0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_OC3_SetConfig+0x66>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a20      	ldr	r2, [pc, #128]	@ (8005634 <TIM_OC3_SetConfig+0xe4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10d      	bne.n	80055d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <TIM_OC3_SetConfig+0xe0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_OC3_SetConfig+0x92>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <TIM_OC3_SetConfig+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d113      	bne.n	800560a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40010000 	.word	0x40010000
 8005634:	40010400 	.word	0x40010400

08005638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800566e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	031b      	lsls	r3, r3, #12
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a12      	ldr	r2, [pc, #72]	@ (80056dc <TIM_OC4_SetConfig+0xa4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC4_SetConfig+0x68>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a11      	ldr	r2, [pc, #68]	@ (80056e0 <TIM_OC4_SetConfig+0xa8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d109      	bne.n	80056b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40010400 	.word	0x40010400

080056e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e05a      	b.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a21      	ldr	r2, [pc, #132]	@ (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005748:	d01d      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1d      	ldr	r2, [pc, #116]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1b      	ldr	r2, [pc, #108]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1a      	ldr	r2, [pc, #104]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a18      	ldr	r2, [pc, #96]	@ (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a17      	ldr	r2, [pc, #92]	@ (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a15      	ldr	r2, [pc, #84]	@ (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800578c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010400 	.word	0x40010400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40001800 	.word	0x40001800

080057dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e03d      	b.n	8005874 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e042      	b.n	8005918 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc f8de 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	@ 0x24
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f973 	bl	8005bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	@ 0x28
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b20      	cmp	r3, #32
 800593e:	d175      	bne.n	8005a2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_UART_Transmit+0x2c>
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e06e      	b.n	8005a2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2221      	movs	r2, #33	@ 0x21
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800595e:	f7fc fa43 	bl	8001de8 <HAL_GetTick>
 8005962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	88fa      	ldrh	r2, [r7, #6]
 8005968:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005978:	d108      	bne.n	800598c <HAL_UART_Transmit+0x6c>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d104      	bne.n	800598c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	e003      	b.n	8005994 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005990:	2300      	movs	r3, #0
 8005992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005994:	e02e      	b.n	80059f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2200      	movs	r2, #0
 800599e:	2180      	movs	r1, #128	@ 0x80
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f848 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e03a      	b.n	8005a2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10b      	bne.n	80059d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	3302      	adds	r3, #2
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	e007      	b.n	80059e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	3301      	adds	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1cb      	bne.n	8005996 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2140      	movs	r1, #64	@ 0x40
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f814 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e006      	b.n	8005a2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e000      	b.n	8005a2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b086      	sub	sp, #24
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a46:	e03b      	b.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a4e:	d037      	beq.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a50:	f7fc f9ca 	bl	8001de8 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	6a3a      	ldr	r2, [r7, #32]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d302      	bcc.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e03a      	b.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d023      	beq.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b80      	cmp	r3, #128	@ 0x80
 8005a7c:	d020      	beq.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b40      	cmp	r3, #64	@ 0x40
 8005a82:	d01d      	beq.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d116      	bne.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f81d 	bl	8005ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e00f      	b.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d0b4      	beq.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b095      	sub	sp, #84	@ 0x54
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b10:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e5      	bne.n	8005b24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d119      	bne.n	8005b94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b80:	61ba      	str	r2, [r7, #24]
 8005b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6979      	ldr	r1, [r7, #20]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e5      	bne.n	8005b60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ba2:	bf00      	nop
 8005ba4:	3754      	adds	r7, #84	@ 0x54
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb4:	b0c0      	sub	sp, #256	@ 0x100
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	68d9      	ldr	r1, [r3, #12]
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	ea40 0301 	orr.w	r3, r0, r1
 8005bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c08:	f021 010c 	bic.w	r1, r1, #12
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c16:	430b      	orrs	r3, r1
 8005c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2a:	6999      	ldr	r1, [r3, #24]
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	ea40 0301 	orr.w	r3, r0, r1
 8005c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8005e7c <UART_SetConfig+0x2cc>)
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d005      	beq.n	8005c50 <UART_SetConfig+0xa0>
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e80 <UART_SetConfig+0x2d0>)
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d104      	bne.n	8005c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c50:	f7fe f9ce 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 8005c54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c58:	e003      	b.n	8005c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c5a:	f7fe f9b5 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 8005c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c6c:	f040 810c 	bne.w	8005e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c82:	4622      	mov	r2, r4
 8005c84:	462b      	mov	r3, r5
 8005c86:	1891      	adds	r1, r2, r2
 8005c88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c8a:	415b      	adcs	r3, r3
 8005c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c92:	4621      	mov	r1, r4
 8005c94:	eb12 0801 	adds.w	r8, r2, r1
 8005c98:	4629      	mov	r1, r5
 8005c9a:	eb43 0901 	adc.w	r9, r3, r1
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cb2:	4690      	mov	r8, r2
 8005cb4:	4699      	mov	r9, r3
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	eb18 0303 	adds.w	r3, r8, r3
 8005cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	eb49 0303 	adc.w	r3, r9, r3
 8005cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cde:	460b      	mov	r3, r1
 8005ce0:	18db      	adds	r3, r3, r3
 8005ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	eb42 0303 	adc.w	r3, r2, r3
 8005cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cf4:	f7fa ff02 	bl	8000afc <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4b61      	ldr	r3, [pc, #388]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	011c      	lsls	r4, r3, #4
 8005d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d20:	415b      	adcs	r3, r3
 8005d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d28:	4641      	mov	r1, r8
 8005d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8005d2e:	4649      	mov	r1, r9
 8005d30:	eb43 0b01 	adc.w	fp, r3, r1
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d48:	4692      	mov	sl, r2
 8005d4a:	469b      	mov	fp, r3
 8005d4c:	4643      	mov	r3, r8
 8005d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d56:	464b      	mov	r3, r9
 8005d58:	eb4b 0303 	adc.w	r3, fp, r3
 8005d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d74:	460b      	mov	r3, r1
 8005d76:	18db      	adds	r3, r3, r3
 8005d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d8a:	f7fa feb7 	bl	8000afc <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	4b3b      	ldr	r3, [pc, #236]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005d96:	fba3 2301 	umull	r2, r3, r3, r1
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	2264      	movs	r2, #100	@ 0x64
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	1acb      	subs	r3, r1, r3
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005daa:	4b36      	ldr	r3, [pc, #216]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005dac:	fba3 2302 	umull	r2, r3, r3, r2
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005db8:	441c      	add	r4, r3
 8005dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ddc:	4641      	mov	r1, r8
 8005dde:	1851      	adds	r1, r2, r1
 8005de0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005de2:	4649      	mov	r1, r9
 8005de4:	414b      	adcs	r3, r1
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005df4:	4659      	mov	r1, fp
 8005df6:	00cb      	lsls	r3, r1, #3
 8005df8:	4651      	mov	r1, sl
 8005dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfe:	4651      	mov	r1, sl
 8005e00:	00ca      	lsls	r2, r1, #3
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	4642      	mov	r2, r8
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e10:	464b      	mov	r3, r9
 8005e12:	460a      	mov	r2, r1
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e30:	460b      	mov	r3, r1
 8005e32:	18db      	adds	r3, r3, r3
 8005e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e36:	4613      	mov	r3, r2
 8005e38:	eb42 0303 	adc.w	r3, r2, r3
 8005e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e46:	f7fa fe59 	bl	8000afc <__aeabi_uldivmod>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005e50:	fba3 1302 	umull	r1, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	2164      	movs	r1, #100	@ 0x64
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	3332      	adds	r3, #50	@ 0x32
 8005e62:	4a08      	ldr	r2, [pc, #32]	@ (8005e84 <UART_SetConfig+0x2d4>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 0207 	and.w	r2, r3, #7
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4422      	add	r2, r4
 8005e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e78:	e106      	b.n	8006088 <UART_SetConfig+0x4d8>
 8005e7a:	bf00      	nop
 8005e7c:	40011000 	.word	0x40011000
 8005e80:	40011400 	.word	0x40011400
 8005e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e9a:	4642      	mov	r2, r8
 8005e9c:	464b      	mov	r3, r9
 8005e9e:	1891      	adds	r1, r2, r2
 8005ea0:	6239      	str	r1, [r7, #32]
 8005ea2:	415b      	adcs	r3, r3
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eaa:	4641      	mov	r1, r8
 8005eac:	1854      	adds	r4, r2, r1
 8005eae:	4649      	mov	r1, r9
 8005eb0:	eb43 0501 	adc.w	r5, r3, r1
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	00eb      	lsls	r3, r5, #3
 8005ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ec2:	00e2      	lsls	r2, r4, #3
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	461d      	mov	r5, r3
 8005ec8:	4643      	mov	r3, r8
 8005eca:	18e3      	adds	r3, r4, r3
 8005ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	eb45 0303 	adc.w	r3, r5, r3
 8005ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ee6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	008b      	lsls	r3, r1, #2
 8005efa:	4621      	mov	r1, r4
 8005efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f00:	4621      	mov	r1, r4
 8005f02:	008a      	lsls	r2, r1, #2
 8005f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f08:	f7fa fdf8 	bl	8000afc <__aeabi_uldivmod>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4b60      	ldr	r3, [pc, #384]	@ (8006094 <UART_SetConfig+0x4e4>)
 8005f12:	fba3 2302 	umull	r2, r3, r3, r2
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	011c      	lsls	r4, r3, #4
 8005f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	1891      	adds	r1, r2, r2
 8005f32:	61b9      	str	r1, [r7, #24]
 8005f34:	415b      	adcs	r3, r3
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	1851      	adds	r1, r2, r1
 8005f40:	6139      	str	r1, [r7, #16]
 8005f42:	4649      	mov	r1, r9
 8005f44:	414b      	adcs	r3, r1
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f54:	4659      	mov	r1, fp
 8005f56:	00cb      	lsls	r3, r1, #3
 8005f58:	4651      	mov	r1, sl
 8005f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5e:	4651      	mov	r1, sl
 8005f60:	00ca      	lsls	r2, r1, #3
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	4642      	mov	r2, r8
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f70:	464b      	mov	r3, r9
 8005f72:	460a      	mov	r2, r1
 8005f74:	eb42 0303 	adc.w	r3, r2, r3
 8005f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f94:	4649      	mov	r1, r9
 8005f96:	008b      	lsls	r3, r1, #2
 8005f98:	4641      	mov	r1, r8
 8005f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	008a      	lsls	r2, r1, #2
 8005fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fa6:	f7fa fda9 	bl	8000afc <__aeabi_uldivmod>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4b38      	ldr	r3, [pc, #224]	@ (8006094 <UART_SetConfig+0x4e4>)
 8005fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	2264      	movs	r2, #100	@ 0x64
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	1acb      	subs	r3, r1, r3
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	3332      	adds	r3, #50	@ 0x32
 8005fc4:	4a33      	ldr	r2, [pc, #204]	@ (8006094 <UART_SetConfig+0x4e4>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fd0:	441c      	add	r4, r3
 8005fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fda:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	1891      	adds	r1, r2, r2
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	1851      	adds	r1, r2, r1
 8005ff4:	6039      	str	r1, [r7, #0]
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	414b      	adcs	r3, r1
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006008:	4659      	mov	r1, fp
 800600a:	00cb      	lsls	r3, r1, #3
 800600c:	4651      	mov	r1, sl
 800600e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006012:	4651      	mov	r1, sl
 8006014:	00ca      	lsls	r2, r1, #3
 8006016:	4610      	mov	r0, r2
 8006018:	4619      	mov	r1, r3
 800601a:	4603      	mov	r3, r0
 800601c:	4642      	mov	r2, r8
 800601e:	189b      	adds	r3, r3, r2
 8006020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006022:	464b      	mov	r3, r9
 8006024:	460a      	mov	r2, r1
 8006026:	eb42 0303 	adc.w	r3, r2, r3
 800602a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	663b      	str	r3, [r7, #96]	@ 0x60
 8006036:	667a      	str	r2, [r7, #100]	@ 0x64
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006044:	4649      	mov	r1, r9
 8006046:	008b      	lsls	r3, r1, #2
 8006048:	4641      	mov	r1, r8
 800604a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800604e:	4641      	mov	r1, r8
 8006050:	008a      	lsls	r2, r1, #2
 8006052:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006056:	f7fa fd51 	bl	8000afc <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4b0d      	ldr	r3, [pc, #52]	@ (8006094 <UART_SetConfig+0x4e4>)
 8006060:	fba3 1302 	umull	r1, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	2164      	movs	r1, #100	@ 0x64
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	3332      	adds	r3, #50	@ 0x32
 8006072:	4a08      	ldr	r2, [pc, #32]	@ (8006094 <UART_SetConfig+0x4e4>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4422      	add	r2, r4
 8006086:	609a      	str	r2, [r3, #8]
}
 8006088:	bf00      	nop
 800608a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800608e:	46bd      	mov	sp, r7
 8006090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006094:	51eb851f 	.word	0x51eb851f

08006098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006098:	b084      	sub	sp, #16
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	f107 001c 	add.w	r0, r7, #28
 80060a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d123      	bne.n	80060fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80060c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d105      	bne.n	80060ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa9a 	bl	8006628 <USB_CoreReset>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	e01b      	b.n	8006132 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa8e 	bl	8006628 <USB_CoreReset>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006110:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	639a      	str	r2, [r3, #56]	@ 0x38
 8006124:	e005      	b.n	8006132 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006132:	7fbb      	ldrb	r3, [r7, #30]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10b      	bne.n	8006150 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f043 0206 	orr.w	r2, r3, #6
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800615c:	b004      	add	sp, #16
 800615e:	4770      	bx	lr

08006160 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f023 0201 	bic.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d115      	bne.n	80061d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061b0:	200a      	movs	r0, #10
 80061b2:	f7fb fe25 	bl	8001e00 <HAL_Delay>
      ms += 10U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	330a      	adds	r3, #10
 80061ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa25 	bl	800660c <USB_GetMode>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d01e      	beq.n	8006206 <USB_SetCurrentMode+0x84>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80061cc:	d9f0      	bls.n	80061b0 <USB_SetCurrentMode+0x2e>
 80061ce:	e01a      	b.n	8006206 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d115      	bne.n	8006202 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061e2:	200a      	movs	r0, #10
 80061e4:	f7fb fe0c 	bl	8001e00 <HAL_Delay>
      ms += 10U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	330a      	adds	r3, #10
 80061ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa0c 	bl	800660c <USB_GetMode>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <USB_SetCurrentMode+0x84>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80061fe:	d9f0      	bls.n	80061e2 <USB_SetCurrentMode+0x60>
 8006200:	e001      	b.n	8006206 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e005      	b.n	8006212 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2bc8      	cmp	r3, #200	@ 0xc8
 800620a:	d101      	bne.n	8006210 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800621c:	b084      	sub	sp, #16
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800622a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	e009      	b.n	8006250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3340      	adds	r3, #64	@ 0x40
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3301      	adds	r3, #1
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b0e      	cmp	r3, #14
 8006254:	d9f2      	bls.n	800623c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006256:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800625a:	2b00      	cmp	r3, #0
 800625c:	d11c      	bne.n	8006298 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800626c:	f043 0302 	orr.w	r3, r3, #2
 8006270:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	e005      	b.n	80062a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062aa:	461a      	mov	r2, r3
 80062ac:	2300      	movs	r3, #0
 80062ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d10d      	bne.n	80062d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062c0:	2100      	movs	r1, #0
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f968 	bl	8006598 <USB_SetDevSpeed>
 80062c8:	e008      	b.n	80062dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062ca:	2101      	movs	r1, #1
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f963 	bl	8006598 <USB_SetDevSpeed>
 80062d2:	e003      	b.n	80062dc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062d4:	2103      	movs	r1, #3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f95e 	bl	8006598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062dc:	2110      	movs	r1, #16
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8fa 	bl	80064d8 <USB_FlushTxFifo>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f924 	bl	800653c <USB_FlushRxFifo>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006304:	461a      	mov	r2, r3
 8006306:	2300      	movs	r3, #0
 8006308:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006310:	461a      	mov	r2, r3
 8006312:	2300      	movs	r3, #0
 8006314:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	461a      	mov	r2, r3
 800631e:	2300      	movs	r3, #0
 8006320:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	e043      	b.n	80063b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800633a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800633e:	d118      	bne.n	8006372 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006352:	461a      	mov	r2, r3
 8006354:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e013      	b.n	8006384 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006368:	461a      	mov	r2, r3
 800636a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	e008      	b.n	8006384 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637e:	461a      	mov	r2, r3
 8006380:	2300      	movs	r3, #0
 8006382:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006390:	461a      	mov	r2, r3
 8006392:	2300      	movs	r3, #0
 8006394:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a2:	461a      	mov	r2, r3
 80063a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3301      	adds	r3, #1
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063b4:	461a      	mov	r2, r3
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d3b5      	bcc.n	8006328 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063bc:	2300      	movs	r3, #0
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	e043      	b.n	800644a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d8:	d118      	bne.n	800640c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ec:	461a      	mov	r2, r3
 80063ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e013      	b.n	800641e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006402:	461a      	mov	r2, r3
 8006404:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e008      	b.n	800641e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006418:	461a      	mov	r2, r3
 800641a:	2300      	movs	r3, #0
 800641c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642a:	461a      	mov	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643c:	461a      	mov	r2, r3
 800643e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006442:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	3301      	adds	r3, #1
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800644e:	461a      	mov	r2, r3
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4293      	cmp	r3, r2
 8006454:	d3b5      	bcc.n	80063c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006468:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006476:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800647c:	2b00      	cmp	r3, #0
 800647e:	d105      	bne.n	800648c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f043 0210 	orr.w	r2, r3, #16
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	4b10      	ldr	r3, [pc, #64]	@ (80064d4 <USB_DevInit+0x2b8>)
 8006492:	4313      	orrs	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006498:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f043 0208 	orr.w	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d107      	bne.n	80064c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064bc:	f043 0304 	orr.w	r3, r3, #4
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064d0:	b004      	add	sp, #16
 80064d2:	4770      	bx	lr
 80064d4:	803c3800 	.word	0x803c3800

080064d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064f2:	d901      	bls.n	80064f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e01b      	b.n	8006530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	daf2      	bge.n	80064e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	019b      	lsls	r3, r3, #6
 8006508:	f043 0220 	orr.w	r2, r3, #32
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800651c:	d901      	bls.n	8006522 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e006      	b.n	8006530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b20      	cmp	r3, #32
 800652c:	d0f0      	beq.n	8006510 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006554:	d901      	bls.n	800655a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e018      	b.n	800658c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	daf2      	bge.n	8006548 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2210      	movs	r2, #16
 800656a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3301      	adds	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006578:	d901      	bls.n	800657e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e006      	b.n	800658c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b10      	cmp	r3, #16
 8006588:	d0f0      	beq.n	800656c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065b8:	4313      	orrs	r3, r2
 80065ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065e4:	f023 0303 	bic.w	r3, r3, #3
 80065e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	f003 0301 	and.w	r3, r3, #1
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006640:	d901      	bls.n	8006646 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e01b      	b.n	800667e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	daf2      	bge.n	8006634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f043 0201 	orr.w	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800666a:	d901      	bls.n	8006670 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e006      	b.n	800667e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	d0f0      	beq.n	800665e <USB_CoreReset+0x36>

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <siprintf>:
 800668c:	b40e      	push	{r1, r2, r3}
 800668e:	b510      	push	{r4, lr}
 8006690:	b09d      	sub	sp, #116	@ 0x74
 8006692:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006694:	9002      	str	r0, [sp, #8]
 8006696:	9006      	str	r0, [sp, #24]
 8006698:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800669c:	480a      	ldr	r0, [pc, #40]	@ (80066c8 <siprintf+0x3c>)
 800669e:	9107      	str	r1, [sp, #28]
 80066a0:	9104      	str	r1, [sp, #16]
 80066a2:	490a      	ldr	r1, [pc, #40]	@ (80066cc <siprintf+0x40>)
 80066a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066a8:	9105      	str	r1, [sp, #20]
 80066aa:	2400      	movs	r4, #0
 80066ac:	a902      	add	r1, sp, #8
 80066ae:	6800      	ldr	r0, [r0, #0]
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80066b4:	f000 f89c 	bl	80067f0 <_svfiprintf_r>
 80066b8:	9b02      	ldr	r3, [sp, #8]
 80066ba:	701c      	strb	r4, [r3, #0]
 80066bc:	b01d      	add	sp, #116	@ 0x74
 80066be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c2:	b003      	add	sp, #12
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	2000000c 	.word	0x2000000c
 80066cc:	ffff0208 	.word	0xffff0208

080066d0 <memset>:
 80066d0:	4402      	add	r2, r0
 80066d2:	4603      	mov	r3, r0
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d100      	bne.n	80066da <memset+0xa>
 80066d8:	4770      	bx	lr
 80066da:	f803 1b01 	strb.w	r1, [r3], #1
 80066de:	e7f9      	b.n	80066d4 <memset+0x4>

080066e0 <__errno>:
 80066e0:	4b01      	ldr	r3, [pc, #4]	@ (80066e8 <__errno+0x8>)
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	2000000c 	.word	0x2000000c

080066ec <__libc_init_array>:
 80066ec:	b570      	push	{r4, r5, r6, lr}
 80066ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006724 <__libc_init_array+0x38>)
 80066f0:	4c0d      	ldr	r4, [pc, #52]	@ (8006728 <__libc_init_array+0x3c>)
 80066f2:	1b64      	subs	r4, r4, r5
 80066f4:	10a4      	asrs	r4, r4, #2
 80066f6:	2600      	movs	r6, #0
 80066f8:	42a6      	cmp	r6, r4
 80066fa:	d109      	bne.n	8006710 <__libc_init_array+0x24>
 80066fc:	4d0b      	ldr	r5, [pc, #44]	@ (800672c <__libc_init_array+0x40>)
 80066fe:	4c0c      	ldr	r4, [pc, #48]	@ (8006730 <__libc_init_array+0x44>)
 8006700:	f000 fc64 	bl	8006fcc <_init>
 8006704:	1b64      	subs	r4, r4, r5
 8006706:	10a4      	asrs	r4, r4, #2
 8006708:	2600      	movs	r6, #0
 800670a:	42a6      	cmp	r6, r4
 800670c:	d105      	bne.n	800671a <__libc_init_array+0x2e>
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	f855 3b04 	ldr.w	r3, [r5], #4
 8006714:	4798      	blx	r3
 8006716:	3601      	adds	r6, #1
 8006718:	e7ee      	b.n	80066f8 <__libc_init_array+0xc>
 800671a:	f855 3b04 	ldr.w	r3, [r5], #4
 800671e:	4798      	blx	r3
 8006720:	3601      	adds	r6, #1
 8006722:	e7f2      	b.n	800670a <__libc_init_array+0x1e>
 8006724:	08007048 	.word	0x08007048
 8006728:	08007048 	.word	0x08007048
 800672c:	08007048 	.word	0x08007048
 8006730:	0800704c 	.word	0x0800704c

08006734 <__retarget_lock_acquire_recursive>:
 8006734:	4770      	bx	lr

08006736 <__retarget_lock_release_recursive>:
 8006736:	4770      	bx	lr

08006738 <__ssputs_r>:
 8006738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800673c:	688e      	ldr	r6, [r1, #8]
 800673e:	461f      	mov	r7, r3
 8006740:	42be      	cmp	r6, r7
 8006742:	680b      	ldr	r3, [r1, #0]
 8006744:	4682      	mov	sl, r0
 8006746:	460c      	mov	r4, r1
 8006748:	4690      	mov	r8, r2
 800674a:	d82d      	bhi.n	80067a8 <__ssputs_r+0x70>
 800674c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006750:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006754:	d026      	beq.n	80067a4 <__ssputs_r+0x6c>
 8006756:	6965      	ldr	r5, [r4, #20]
 8006758:	6909      	ldr	r1, [r1, #16]
 800675a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800675e:	eba3 0901 	sub.w	r9, r3, r1
 8006762:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006766:	1c7b      	adds	r3, r7, #1
 8006768:	444b      	add	r3, r9
 800676a:	106d      	asrs	r5, r5, #1
 800676c:	429d      	cmp	r5, r3
 800676e:	bf38      	it	cc
 8006770:	461d      	movcc	r5, r3
 8006772:	0553      	lsls	r3, r2, #21
 8006774:	d527      	bpl.n	80067c6 <__ssputs_r+0x8e>
 8006776:	4629      	mov	r1, r5
 8006778:	f000 f958 	bl	8006a2c <_malloc_r>
 800677c:	4606      	mov	r6, r0
 800677e:	b360      	cbz	r0, 80067da <__ssputs_r+0xa2>
 8006780:	6921      	ldr	r1, [r4, #16]
 8006782:	464a      	mov	r2, r9
 8006784:	f000 fbc2 	bl	8006f0c <memcpy>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800678e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	6126      	str	r6, [r4, #16]
 8006796:	6165      	str	r5, [r4, #20]
 8006798:	444e      	add	r6, r9
 800679a:	eba5 0509 	sub.w	r5, r5, r9
 800679e:	6026      	str	r6, [r4, #0]
 80067a0:	60a5      	str	r5, [r4, #8]
 80067a2:	463e      	mov	r6, r7
 80067a4:	42be      	cmp	r6, r7
 80067a6:	d900      	bls.n	80067aa <__ssputs_r+0x72>
 80067a8:	463e      	mov	r6, r7
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	4632      	mov	r2, r6
 80067ae:	4641      	mov	r1, r8
 80067b0:	f000 fb82 	bl	8006eb8 <memmove>
 80067b4:	68a3      	ldr	r3, [r4, #8]
 80067b6:	1b9b      	subs	r3, r3, r6
 80067b8:	60a3      	str	r3, [r4, #8]
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	4433      	add	r3, r6
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	2000      	movs	r0, #0
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c6:	462a      	mov	r2, r5
 80067c8:	f000 fb48 	bl	8006e5c <_realloc_r>
 80067cc:	4606      	mov	r6, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d1e0      	bne.n	8006794 <__ssputs_r+0x5c>
 80067d2:	6921      	ldr	r1, [r4, #16]
 80067d4:	4650      	mov	r0, sl
 80067d6:	f000 fba7 	bl	8006f28 <_free_r>
 80067da:	230c      	movs	r3, #12
 80067dc:	f8ca 3000 	str.w	r3, [sl]
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e6:	81a3      	strh	r3, [r4, #12]
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067ec:	e7e9      	b.n	80067c2 <__ssputs_r+0x8a>
	...

080067f0 <_svfiprintf_r>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	4698      	mov	r8, r3
 80067f6:	898b      	ldrh	r3, [r1, #12]
 80067f8:	061b      	lsls	r3, r3, #24
 80067fa:	b09d      	sub	sp, #116	@ 0x74
 80067fc:	4607      	mov	r7, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	4614      	mov	r4, r2
 8006802:	d510      	bpl.n	8006826 <_svfiprintf_r+0x36>
 8006804:	690b      	ldr	r3, [r1, #16]
 8006806:	b973      	cbnz	r3, 8006826 <_svfiprintf_r+0x36>
 8006808:	2140      	movs	r1, #64	@ 0x40
 800680a:	f000 f90f 	bl	8006a2c <_malloc_r>
 800680e:	6028      	str	r0, [r5, #0]
 8006810:	6128      	str	r0, [r5, #16]
 8006812:	b930      	cbnz	r0, 8006822 <_svfiprintf_r+0x32>
 8006814:	230c      	movs	r3, #12
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800681c:	b01d      	add	sp, #116	@ 0x74
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	2340      	movs	r3, #64	@ 0x40
 8006824:	616b      	str	r3, [r5, #20]
 8006826:	2300      	movs	r3, #0
 8006828:	9309      	str	r3, [sp, #36]	@ 0x24
 800682a:	2320      	movs	r3, #32
 800682c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006830:	f8cd 800c 	str.w	r8, [sp, #12]
 8006834:	2330      	movs	r3, #48	@ 0x30
 8006836:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069d4 <_svfiprintf_r+0x1e4>
 800683a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800683e:	f04f 0901 	mov.w	r9, #1
 8006842:	4623      	mov	r3, r4
 8006844:	469a      	mov	sl, r3
 8006846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800684a:	b10a      	cbz	r2, 8006850 <_svfiprintf_r+0x60>
 800684c:	2a25      	cmp	r2, #37	@ 0x25
 800684e:	d1f9      	bne.n	8006844 <_svfiprintf_r+0x54>
 8006850:	ebba 0b04 	subs.w	fp, sl, r4
 8006854:	d00b      	beq.n	800686e <_svfiprintf_r+0x7e>
 8006856:	465b      	mov	r3, fp
 8006858:	4622      	mov	r2, r4
 800685a:	4629      	mov	r1, r5
 800685c:	4638      	mov	r0, r7
 800685e:	f7ff ff6b 	bl	8006738 <__ssputs_r>
 8006862:	3001      	adds	r0, #1
 8006864:	f000 80a7 	beq.w	80069b6 <_svfiprintf_r+0x1c6>
 8006868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800686a:	445a      	add	r2, fp
 800686c:	9209      	str	r2, [sp, #36]	@ 0x24
 800686e:	f89a 3000 	ldrb.w	r3, [sl]
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 809f 	beq.w	80069b6 <_svfiprintf_r+0x1c6>
 8006878:	2300      	movs	r3, #0
 800687a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800687e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006882:	f10a 0a01 	add.w	sl, sl, #1
 8006886:	9304      	str	r3, [sp, #16]
 8006888:	9307      	str	r3, [sp, #28]
 800688a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800688e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006890:	4654      	mov	r4, sl
 8006892:	2205      	movs	r2, #5
 8006894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006898:	484e      	ldr	r0, [pc, #312]	@ (80069d4 <_svfiprintf_r+0x1e4>)
 800689a:	f7f9 fcc1 	bl	8000220 <memchr>
 800689e:	9a04      	ldr	r2, [sp, #16]
 80068a0:	b9d8      	cbnz	r0, 80068da <_svfiprintf_r+0xea>
 80068a2:	06d0      	lsls	r0, r2, #27
 80068a4:	bf44      	itt	mi
 80068a6:	2320      	movmi	r3, #32
 80068a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068ac:	0711      	lsls	r1, r2, #28
 80068ae:	bf44      	itt	mi
 80068b0:	232b      	movmi	r3, #43	@ 0x2b
 80068b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068b6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80068bc:	d015      	beq.n	80068ea <_svfiprintf_r+0xfa>
 80068be:	9a07      	ldr	r2, [sp, #28]
 80068c0:	4654      	mov	r4, sl
 80068c2:	2000      	movs	r0, #0
 80068c4:	f04f 0c0a 	mov.w	ip, #10
 80068c8:	4621      	mov	r1, r4
 80068ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ce:	3b30      	subs	r3, #48	@ 0x30
 80068d0:	2b09      	cmp	r3, #9
 80068d2:	d94b      	bls.n	800696c <_svfiprintf_r+0x17c>
 80068d4:	b1b0      	cbz	r0, 8006904 <_svfiprintf_r+0x114>
 80068d6:	9207      	str	r2, [sp, #28]
 80068d8:	e014      	b.n	8006904 <_svfiprintf_r+0x114>
 80068da:	eba0 0308 	sub.w	r3, r0, r8
 80068de:	fa09 f303 	lsl.w	r3, r9, r3
 80068e2:	4313      	orrs	r3, r2
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	46a2      	mov	sl, r4
 80068e8:	e7d2      	b.n	8006890 <_svfiprintf_r+0xa0>
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	1d19      	adds	r1, r3, #4
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	9103      	str	r1, [sp, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bfbb      	ittet	lt
 80068f6:	425b      	neglt	r3, r3
 80068f8:	f042 0202 	orrlt.w	r2, r2, #2
 80068fc:	9307      	strge	r3, [sp, #28]
 80068fe:	9307      	strlt	r3, [sp, #28]
 8006900:	bfb8      	it	lt
 8006902:	9204      	strlt	r2, [sp, #16]
 8006904:	7823      	ldrb	r3, [r4, #0]
 8006906:	2b2e      	cmp	r3, #46	@ 0x2e
 8006908:	d10a      	bne.n	8006920 <_svfiprintf_r+0x130>
 800690a:	7863      	ldrb	r3, [r4, #1]
 800690c:	2b2a      	cmp	r3, #42	@ 0x2a
 800690e:	d132      	bne.n	8006976 <_svfiprintf_r+0x186>
 8006910:	9b03      	ldr	r3, [sp, #12]
 8006912:	1d1a      	adds	r2, r3, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	9203      	str	r2, [sp, #12]
 8006918:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800691c:	3402      	adds	r4, #2
 800691e:	9305      	str	r3, [sp, #20]
 8006920:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80069e4 <_svfiprintf_r+0x1f4>
 8006924:	7821      	ldrb	r1, [r4, #0]
 8006926:	2203      	movs	r2, #3
 8006928:	4650      	mov	r0, sl
 800692a:	f7f9 fc79 	bl	8000220 <memchr>
 800692e:	b138      	cbz	r0, 8006940 <_svfiprintf_r+0x150>
 8006930:	9b04      	ldr	r3, [sp, #16]
 8006932:	eba0 000a 	sub.w	r0, r0, sl
 8006936:	2240      	movs	r2, #64	@ 0x40
 8006938:	4082      	lsls	r2, r0
 800693a:	4313      	orrs	r3, r2
 800693c:	3401      	adds	r4, #1
 800693e:	9304      	str	r3, [sp, #16]
 8006940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006944:	4824      	ldr	r0, [pc, #144]	@ (80069d8 <_svfiprintf_r+0x1e8>)
 8006946:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800694a:	2206      	movs	r2, #6
 800694c:	f7f9 fc68 	bl	8000220 <memchr>
 8006950:	2800      	cmp	r0, #0
 8006952:	d036      	beq.n	80069c2 <_svfiprintf_r+0x1d2>
 8006954:	4b21      	ldr	r3, [pc, #132]	@ (80069dc <_svfiprintf_r+0x1ec>)
 8006956:	bb1b      	cbnz	r3, 80069a0 <_svfiprintf_r+0x1b0>
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	3307      	adds	r3, #7
 800695c:	f023 0307 	bic.w	r3, r3, #7
 8006960:	3308      	adds	r3, #8
 8006962:	9303      	str	r3, [sp, #12]
 8006964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006966:	4433      	add	r3, r6
 8006968:	9309      	str	r3, [sp, #36]	@ 0x24
 800696a:	e76a      	b.n	8006842 <_svfiprintf_r+0x52>
 800696c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006970:	460c      	mov	r4, r1
 8006972:	2001      	movs	r0, #1
 8006974:	e7a8      	b.n	80068c8 <_svfiprintf_r+0xd8>
 8006976:	2300      	movs	r3, #0
 8006978:	3401      	adds	r4, #1
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	4619      	mov	r1, r3
 800697e:	f04f 0c0a 	mov.w	ip, #10
 8006982:	4620      	mov	r0, r4
 8006984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006988:	3a30      	subs	r2, #48	@ 0x30
 800698a:	2a09      	cmp	r2, #9
 800698c:	d903      	bls.n	8006996 <_svfiprintf_r+0x1a6>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0c6      	beq.n	8006920 <_svfiprintf_r+0x130>
 8006992:	9105      	str	r1, [sp, #20]
 8006994:	e7c4      	b.n	8006920 <_svfiprintf_r+0x130>
 8006996:	fb0c 2101 	mla	r1, ip, r1, r2
 800699a:	4604      	mov	r4, r0
 800699c:	2301      	movs	r3, #1
 800699e:	e7f0      	b.n	8006982 <_svfiprintf_r+0x192>
 80069a0:	ab03      	add	r3, sp, #12
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	462a      	mov	r2, r5
 80069a6:	4b0e      	ldr	r3, [pc, #56]	@ (80069e0 <_svfiprintf_r+0x1f0>)
 80069a8:	a904      	add	r1, sp, #16
 80069aa:	4638      	mov	r0, r7
 80069ac:	f3af 8000 	nop.w
 80069b0:	1c42      	adds	r2, r0, #1
 80069b2:	4606      	mov	r6, r0
 80069b4:	d1d6      	bne.n	8006964 <_svfiprintf_r+0x174>
 80069b6:	89ab      	ldrh	r3, [r5, #12]
 80069b8:	065b      	lsls	r3, r3, #25
 80069ba:	f53f af2d 	bmi.w	8006818 <_svfiprintf_r+0x28>
 80069be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069c0:	e72c      	b.n	800681c <_svfiprintf_r+0x2c>
 80069c2:	ab03      	add	r3, sp, #12
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	462a      	mov	r2, r5
 80069c8:	4b05      	ldr	r3, [pc, #20]	@ (80069e0 <_svfiprintf_r+0x1f0>)
 80069ca:	a904      	add	r1, sp, #16
 80069cc:	4638      	mov	r0, r7
 80069ce:	f000 f91b 	bl	8006c08 <_printf_i>
 80069d2:	e7ed      	b.n	80069b0 <_svfiprintf_r+0x1c0>
 80069d4:	0800700c 	.word	0x0800700c
 80069d8:	08007016 	.word	0x08007016
 80069dc:	00000000 	.word	0x00000000
 80069e0:	08006739 	.word	0x08006739
 80069e4:	08007012 	.word	0x08007012

080069e8 <sbrk_aligned>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006a28 <sbrk_aligned+0x40>)
 80069ec:	460c      	mov	r4, r1
 80069ee:	6831      	ldr	r1, [r6, #0]
 80069f0:	4605      	mov	r5, r0
 80069f2:	b911      	cbnz	r1, 80069fa <sbrk_aligned+0x12>
 80069f4:	f000 fa7a 	bl	8006eec <_sbrk_r>
 80069f8:	6030      	str	r0, [r6, #0]
 80069fa:	4621      	mov	r1, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 fa75 	bl	8006eec <_sbrk_r>
 8006a02:	1c43      	adds	r3, r0, #1
 8006a04:	d103      	bne.n	8006a0e <sbrk_aligned+0x26>
 8006a06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	bd70      	pop	{r4, r5, r6, pc}
 8006a0e:	1cc4      	adds	r4, r0, #3
 8006a10:	f024 0403 	bic.w	r4, r4, #3
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	d0f8      	beq.n	8006a0a <sbrk_aligned+0x22>
 8006a18:	1a21      	subs	r1, r4, r0
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 fa66 	bl	8006eec <_sbrk_r>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d1f2      	bne.n	8006a0a <sbrk_aligned+0x22>
 8006a24:	e7ef      	b.n	8006a06 <sbrk_aligned+0x1e>
 8006a26:	bf00      	nop
 8006a28:	200007cc 	.word	0x200007cc

08006a2c <_malloc_r>:
 8006a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a30:	1ccd      	adds	r5, r1, #3
 8006a32:	f025 0503 	bic.w	r5, r5, #3
 8006a36:	3508      	adds	r5, #8
 8006a38:	2d0c      	cmp	r5, #12
 8006a3a:	bf38      	it	cc
 8006a3c:	250c      	movcc	r5, #12
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	4606      	mov	r6, r0
 8006a42:	db01      	blt.n	8006a48 <_malloc_r+0x1c>
 8006a44:	42a9      	cmp	r1, r5
 8006a46:	d904      	bls.n	8006a52 <_malloc_r+0x26>
 8006a48:	230c      	movs	r3, #12
 8006a4a:	6033      	str	r3, [r6, #0]
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b28 <_malloc_r+0xfc>
 8006a56:	f000 f9f5 	bl	8006e44 <__malloc_lock>
 8006a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a5e:	461c      	mov	r4, r3
 8006a60:	bb44      	cbnz	r4, 8006ab4 <_malloc_r+0x88>
 8006a62:	4629      	mov	r1, r5
 8006a64:	4630      	mov	r0, r6
 8006a66:	f7ff ffbf 	bl	80069e8 <sbrk_aligned>
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	d158      	bne.n	8006b22 <_malloc_r+0xf6>
 8006a70:	f8d8 4000 	ldr.w	r4, [r8]
 8006a74:	4627      	mov	r7, r4
 8006a76:	2f00      	cmp	r7, #0
 8006a78:	d143      	bne.n	8006b02 <_malloc_r+0xd6>
 8006a7a:	2c00      	cmp	r4, #0
 8006a7c:	d04b      	beq.n	8006b16 <_malloc_r+0xea>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	4639      	mov	r1, r7
 8006a82:	4630      	mov	r0, r6
 8006a84:	eb04 0903 	add.w	r9, r4, r3
 8006a88:	f000 fa30 	bl	8006eec <_sbrk_r>
 8006a8c:	4581      	cmp	r9, r0
 8006a8e:	d142      	bne.n	8006b16 <_malloc_r+0xea>
 8006a90:	6821      	ldr	r1, [r4, #0]
 8006a92:	1a6d      	subs	r5, r5, r1
 8006a94:	4629      	mov	r1, r5
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7ff ffa6 	bl	80069e8 <sbrk_aligned>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d03a      	beq.n	8006b16 <_malloc_r+0xea>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	442b      	add	r3, r5
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	bb62      	cbnz	r2, 8006b08 <_malloc_r+0xdc>
 8006aae:	f8c8 7000 	str.w	r7, [r8]
 8006ab2:	e00f      	b.n	8006ad4 <_malloc_r+0xa8>
 8006ab4:	6822      	ldr	r2, [r4, #0]
 8006ab6:	1b52      	subs	r2, r2, r5
 8006ab8:	d420      	bmi.n	8006afc <_malloc_r+0xd0>
 8006aba:	2a0b      	cmp	r2, #11
 8006abc:	d917      	bls.n	8006aee <_malloc_r+0xc2>
 8006abe:	1961      	adds	r1, r4, r5
 8006ac0:	42a3      	cmp	r3, r4
 8006ac2:	6025      	str	r5, [r4, #0]
 8006ac4:	bf18      	it	ne
 8006ac6:	6059      	strne	r1, [r3, #4]
 8006ac8:	6863      	ldr	r3, [r4, #4]
 8006aca:	bf08      	it	eq
 8006acc:	f8c8 1000 	streq.w	r1, [r8]
 8006ad0:	5162      	str	r2, [r4, r5]
 8006ad2:	604b      	str	r3, [r1, #4]
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 f9bb 	bl	8006e50 <__malloc_unlock>
 8006ada:	f104 000b 	add.w	r0, r4, #11
 8006ade:	1d23      	adds	r3, r4, #4
 8006ae0:	f020 0007 	bic.w	r0, r0, #7
 8006ae4:	1ac2      	subs	r2, r0, r3
 8006ae6:	bf1c      	itt	ne
 8006ae8:	1a1b      	subne	r3, r3, r0
 8006aea:	50a3      	strne	r3, [r4, r2]
 8006aec:	e7af      	b.n	8006a4e <_malloc_r+0x22>
 8006aee:	6862      	ldr	r2, [r4, #4]
 8006af0:	42a3      	cmp	r3, r4
 8006af2:	bf0c      	ite	eq
 8006af4:	f8c8 2000 	streq.w	r2, [r8]
 8006af8:	605a      	strne	r2, [r3, #4]
 8006afa:	e7eb      	b.n	8006ad4 <_malloc_r+0xa8>
 8006afc:	4623      	mov	r3, r4
 8006afe:	6864      	ldr	r4, [r4, #4]
 8006b00:	e7ae      	b.n	8006a60 <_malloc_r+0x34>
 8006b02:	463c      	mov	r4, r7
 8006b04:	687f      	ldr	r7, [r7, #4]
 8006b06:	e7b6      	b.n	8006a76 <_malloc_r+0x4a>
 8006b08:	461a      	mov	r2, r3
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	d1fb      	bne.n	8006b08 <_malloc_r+0xdc>
 8006b10:	2300      	movs	r3, #0
 8006b12:	6053      	str	r3, [r2, #4]
 8006b14:	e7de      	b.n	8006ad4 <_malloc_r+0xa8>
 8006b16:	230c      	movs	r3, #12
 8006b18:	6033      	str	r3, [r6, #0]
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 f998 	bl	8006e50 <__malloc_unlock>
 8006b20:	e794      	b.n	8006a4c <_malloc_r+0x20>
 8006b22:	6005      	str	r5, [r0, #0]
 8006b24:	e7d6      	b.n	8006ad4 <_malloc_r+0xa8>
 8006b26:	bf00      	nop
 8006b28:	200007d0 	.word	0x200007d0

08006b2c <_printf_common>:
 8006b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	4616      	mov	r6, r2
 8006b32:	4698      	mov	r8, r3
 8006b34:	688a      	ldr	r2, [r1, #8]
 8006b36:	690b      	ldr	r3, [r1, #16]
 8006b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	bfb8      	it	lt
 8006b40:	4613      	movlt	r3, r2
 8006b42:	6033      	str	r3, [r6, #0]
 8006b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b48:	4607      	mov	r7, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	b10a      	cbz	r2, 8006b52 <_printf_common+0x26>
 8006b4e:	3301      	adds	r3, #1
 8006b50:	6033      	str	r3, [r6, #0]
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	0699      	lsls	r1, r3, #26
 8006b56:	bf42      	ittt	mi
 8006b58:	6833      	ldrmi	r3, [r6, #0]
 8006b5a:	3302      	addmi	r3, #2
 8006b5c:	6033      	strmi	r3, [r6, #0]
 8006b5e:	6825      	ldr	r5, [r4, #0]
 8006b60:	f015 0506 	ands.w	r5, r5, #6
 8006b64:	d106      	bne.n	8006b74 <_printf_common+0x48>
 8006b66:	f104 0a19 	add.w	sl, r4, #25
 8006b6a:	68e3      	ldr	r3, [r4, #12]
 8006b6c:	6832      	ldr	r2, [r6, #0]
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	42ab      	cmp	r3, r5
 8006b72:	dc26      	bgt.n	8006bc2 <_printf_common+0x96>
 8006b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	3b00      	subs	r3, #0
 8006b7c:	bf18      	it	ne
 8006b7e:	2301      	movne	r3, #1
 8006b80:	0692      	lsls	r2, r2, #26
 8006b82:	d42b      	bmi.n	8006bdc <_printf_common+0xb0>
 8006b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b88:	4641      	mov	r1, r8
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	47c8      	blx	r9
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d01e      	beq.n	8006bd0 <_printf_common+0xa4>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	f003 0306 	and.w	r3, r3, #6
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	bf02      	ittt	eq
 8006b9e:	68e5      	ldreq	r5, [r4, #12]
 8006ba0:	6833      	ldreq	r3, [r6, #0]
 8006ba2:	1aed      	subeq	r5, r5, r3
 8006ba4:	68a3      	ldr	r3, [r4, #8]
 8006ba6:	bf0c      	ite	eq
 8006ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bac:	2500      	movne	r5, #0
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	bfc4      	itt	gt
 8006bb2:	1a9b      	subgt	r3, r3, r2
 8006bb4:	18ed      	addgt	r5, r5, r3
 8006bb6:	2600      	movs	r6, #0
 8006bb8:	341a      	adds	r4, #26
 8006bba:	42b5      	cmp	r5, r6
 8006bbc:	d11a      	bne.n	8006bf4 <_printf_common+0xc8>
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e008      	b.n	8006bd4 <_printf_common+0xa8>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	4638      	mov	r0, r7
 8006bca:	47c8      	blx	r9
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d103      	bne.n	8006bd8 <_printf_common+0xac>
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd8:	3501      	adds	r5, #1
 8006bda:	e7c6      	b.n	8006b6a <_printf_common+0x3e>
 8006bdc:	18e1      	adds	r1, r4, r3
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	2030      	movs	r0, #48	@ 0x30
 8006be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006be6:	4422      	add	r2, r4
 8006be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	e7c7      	b.n	8006b84 <_printf_common+0x58>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	47c8      	blx	r9
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d0e6      	beq.n	8006bd0 <_printf_common+0xa4>
 8006c02:	3601      	adds	r6, #1
 8006c04:	e7d9      	b.n	8006bba <_printf_common+0x8e>
	...

08006c08 <_printf_i>:
 8006c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	7e0f      	ldrb	r7, [r1, #24]
 8006c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c10:	2f78      	cmp	r7, #120	@ 0x78
 8006c12:	4691      	mov	r9, r2
 8006c14:	4680      	mov	r8, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	469a      	mov	sl, r3
 8006c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c1e:	d807      	bhi.n	8006c30 <_printf_i+0x28>
 8006c20:	2f62      	cmp	r7, #98	@ 0x62
 8006c22:	d80a      	bhi.n	8006c3a <_printf_i+0x32>
 8006c24:	2f00      	cmp	r7, #0
 8006c26:	f000 80d1 	beq.w	8006dcc <_printf_i+0x1c4>
 8006c2a:	2f58      	cmp	r7, #88	@ 0x58
 8006c2c:	f000 80b8 	beq.w	8006da0 <_printf_i+0x198>
 8006c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c38:	e03a      	b.n	8006cb0 <_printf_i+0xa8>
 8006c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c3e:	2b15      	cmp	r3, #21
 8006c40:	d8f6      	bhi.n	8006c30 <_printf_i+0x28>
 8006c42:	a101      	add	r1, pc, #4	@ (adr r1, 8006c48 <_printf_i+0x40>)
 8006c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006cb5 	.word	0x08006cb5
 8006c50:	08006c31 	.word	0x08006c31
 8006c54:	08006c31 	.word	0x08006c31
 8006c58:	08006c31 	.word	0x08006c31
 8006c5c:	08006c31 	.word	0x08006c31
 8006c60:	08006cb5 	.word	0x08006cb5
 8006c64:	08006c31 	.word	0x08006c31
 8006c68:	08006c31 	.word	0x08006c31
 8006c6c:	08006c31 	.word	0x08006c31
 8006c70:	08006c31 	.word	0x08006c31
 8006c74:	08006db3 	.word	0x08006db3
 8006c78:	08006cdf 	.word	0x08006cdf
 8006c7c:	08006d6d 	.word	0x08006d6d
 8006c80:	08006c31 	.word	0x08006c31
 8006c84:	08006c31 	.word	0x08006c31
 8006c88:	08006dd5 	.word	0x08006dd5
 8006c8c:	08006c31 	.word	0x08006c31
 8006c90:	08006cdf 	.word	0x08006cdf
 8006c94:	08006c31 	.word	0x08006c31
 8006c98:	08006c31 	.word	0x08006c31
 8006c9c:	08006d75 	.word	0x08006d75
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6032      	str	r2, [r6, #0]
 8006ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e09c      	b.n	8006dee <_printf_i+0x1e6>
 8006cb4:	6833      	ldr	r3, [r6, #0]
 8006cb6:	6820      	ldr	r0, [r4, #0]
 8006cb8:	1d19      	adds	r1, r3, #4
 8006cba:	6031      	str	r1, [r6, #0]
 8006cbc:	0606      	lsls	r6, r0, #24
 8006cbe:	d501      	bpl.n	8006cc4 <_printf_i+0xbc>
 8006cc0:	681d      	ldr	r5, [r3, #0]
 8006cc2:	e003      	b.n	8006ccc <_printf_i+0xc4>
 8006cc4:	0645      	lsls	r5, r0, #25
 8006cc6:	d5fb      	bpl.n	8006cc0 <_printf_i+0xb8>
 8006cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	da03      	bge.n	8006cd8 <_printf_i+0xd0>
 8006cd0:	232d      	movs	r3, #45	@ 0x2d
 8006cd2:	426d      	negs	r5, r5
 8006cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd8:	4858      	ldr	r0, [pc, #352]	@ (8006e3c <_printf_i+0x234>)
 8006cda:	230a      	movs	r3, #10
 8006cdc:	e011      	b.n	8006d02 <_printf_i+0xfa>
 8006cde:	6821      	ldr	r1, [r4, #0]
 8006ce0:	6833      	ldr	r3, [r6, #0]
 8006ce2:	0608      	lsls	r0, r1, #24
 8006ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ce8:	d402      	bmi.n	8006cf0 <_printf_i+0xe8>
 8006cea:	0649      	lsls	r1, r1, #25
 8006cec:	bf48      	it	mi
 8006cee:	b2ad      	uxthmi	r5, r5
 8006cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cf2:	4852      	ldr	r0, [pc, #328]	@ (8006e3c <_printf_i+0x234>)
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	bf14      	ite	ne
 8006cf8:	230a      	movne	r3, #10
 8006cfa:	2308      	moveq	r3, #8
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d02:	6866      	ldr	r6, [r4, #4]
 8006d04:	60a6      	str	r6, [r4, #8]
 8006d06:	2e00      	cmp	r6, #0
 8006d08:	db05      	blt.n	8006d16 <_printf_i+0x10e>
 8006d0a:	6821      	ldr	r1, [r4, #0]
 8006d0c:	432e      	orrs	r6, r5
 8006d0e:	f021 0104 	bic.w	r1, r1, #4
 8006d12:	6021      	str	r1, [r4, #0]
 8006d14:	d04b      	beq.n	8006dae <_printf_i+0x1a6>
 8006d16:	4616      	mov	r6, r2
 8006d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8006d20:	5dc7      	ldrb	r7, [r0, r7]
 8006d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d26:	462f      	mov	r7, r5
 8006d28:	42bb      	cmp	r3, r7
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	d9f4      	bls.n	8006d18 <_printf_i+0x110>
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d10b      	bne.n	8006d4a <_printf_i+0x142>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	07df      	lsls	r7, r3, #31
 8006d36:	d508      	bpl.n	8006d4a <_printf_i+0x142>
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	6861      	ldr	r1, [r4, #4]
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	bfde      	ittt	le
 8006d40:	2330      	movle	r3, #48	@ 0x30
 8006d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d46:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006d4a:	1b92      	subs	r2, r2, r6
 8006d4c:	6122      	str	r2, [r4, #16]
 8006d4e:	f8cd a000 	str.w	sl, [sp]
 8006d52:	464b      	mov	r3, r9
 8006d54:	aa03      	add	r2, sp, #12
 8006d56:	4621      	mov	r1, r4
 8006d58:	4640      	mov	r0, r8
 8006d5a:	f7ff fee7 	bl	8006b2c <_printf_common>
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d14a      	bne.n	8006df8 <_printf_i+0x1f0>
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d66:	b004      	add	sp, #16
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	f043 0320 	orr.w	r3, r3, #32
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	4832      	ldr	r0, [pc, #200]	@ (8006e40 <_printf_i+0x238>)
 8006d76:	2778      	movs	r7, #120	@ 0x78
 8006d78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	6831      	ldr	r1, [r6, #0]
 8006d80:	061f      	lsls	r7, r3, #24
 8006d82:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d86:	d402      	bmi.n	8006d8e <_printf_i+0x186>
 8006d88:	065f      	lsls	r7, r3, #25
 8006d8a:	bf48      	it	mi
 8006d8c:	b2ad      	uxthmi	r5, r5
 8006d8e:	6031      	str	r1, [r6, #0]
 8006d90:	07d9      	lsls	r1, r3, #31
 8006d92:	bf44      	itt	mi
 8006d94:	f043 0320 	orrmi.w	r3, r3, #32
 8006d98:	6023      	strmi	r3, [r4, #0]
 8006d9a:	b11d      	cbz	r5, 8006da4 <_printf_i+0x19c>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	e7ad      	b.n	8006cfc <_printf_i+0xf4>
 8006da0:	4826      	ldr	r0, [pc, #152]	@ (8006e3c <_printf_i+0x234>)
 8006da2:	e7e9      	b.n	8006d78 <_printf_i+0x170>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	f023 0320 	bic.w	r3, r3, #32
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	e7f6      	b.n	8006d9c <_printf_i+0x194>
 8006dae:	4616      	mov	r6, r2
 8006db0:	e7bd      	b.n	8006d2e <_printf_i+0x126>
 8006db2:	6833      	ldr	r3, [r6, #0]
 8006db4:	6825      	ldr	r5, [r4, #0]
 8006db6:	6961      	ldr	r1, [r4, #20]
 8006db8:	1d18      	adds	r0, r3, #4
 8006dba:	6030      	str	r0, [r6, #0]
 8006dbc:	062e      	lsls	r6, r5, #24
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	d501      	bpl.n	8006dc6 <_printf_i+0x1be>
 8006dc2:	6019      	str	r1, [r3, #0]
 8006dc4:	e002      	b.n	8006dcc <_printf_i+0x1c4>
 8006dc6:	0668      	lsls	r0, r5, #25
 8006dc8:	d5fb      	bpl.n	8006dc2 <_printf_i+0x1ba>
 8006dca:	8019      	strh	r1, [r3, #0]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	6123      	str	r3, [r4, #16]
 8006dd0:	4616      	mov	r6, r2
 8006dd2:	e7bc      	b.n	8006d4e <_printf_i+0x146>
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	1d1a      	adds	r2, r3, #4
 8006dd8:	6032      	str	r2, [r6, #0]
 8006dda:	681e      	ldr	r6, [r3, #0]
 8006ddc:	6862      	ldr	r2, [r4, #4]
 8006dde:	2100      	movs	r1, #0
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7f9 fa1d 	bl	8000220 <memchr>
 8006de6:	b108      	cbz	r0, 8006dec <_printf_i+0x1e4>
 8006de8:	1b80      	subs	r0, r0, r6
 8006dea:	6060      	str	r0, [r4, #4]
 8006dec:	6863      	ldr	r3, [r4, #4]
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	2300      	movs	r3, #0
 8006df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006df6:	e7aa      	b.n	8006d4e <_printf_i+0x146>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	4632      	mov	r2, r6
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4640      	mov	r0, r8
 8006e00:	47d0      	blx	sl
 8006e02:	3001      	adds	r0, #1
 8006e04:	d0ad      	beq.n	8006d62 <_printf_i+0x15a>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	079b      	lsls	r3, r3, #30
 8006e0a:	d413      	bmi.n	8006e34 <_printf_i+0x22c>
 8006e0c:	68e0      	ldr	r0, [r4, #12]
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	4298      	cmp	r0, r3
 8006e12:	bfb8      	it	lt
 8006e14:	4618      	movlt	r0, r3
 8006e16:	e7a6      	b.n	8006d66 <_printf_i+0x15e>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4632      	mov	r2, r6
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	4640      	mov	r0, r8
 8006e20:	47d0      	blx	sl
 8006e22:	3001      	adds	r0, #1
 8006e24:	d09d      	beq.n	8006d62 <_printf_i+0x15a>
 8006e26:	3501      	adds	r5, #1
 8006e28:	68e3      	ldr	r3, [r4, #12]
 8006e2a:	9903      	ldr	r1, [sp, #12]
 8006e2c:	1a5b      	subs	r3, r3, r1
 8006e2e:	42ab      	cmp	r3, r5
 8006e30:	dcf2      	bgt.n	8006e18 <_printf_i+0x210>
 8006e32:	e7eb      	b.n	8006e0c <_printf_i+0x204>
 8006e34:	2500      	movs	r5, #0
 8006e36:	f104 0619 	add.w	r6, r4, #25
 8006e3a:	e7f5      	b.n	8006e28 <_printf_i+0x220>
 8006e3c:	0800701d 	.word	0x0800701d
 8006e40:	0800702e 	.word	0x0800702e

08006e44 <__malloc_lock>:
 8006e44:	4801      	ldr	r0, [pc, #4]	@ (8006e4c <__malloc_lock+0x8>)
 8006e46:	f7ff bc75 	b.w	8006734 <__retarget_lock_acquire_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	200007c8 	.word	0x200007c8

08006e50 <__malloc_unlock>:
 8006e50:	4801      	ldr	r0, [pc, #4]	@ (8006e58 <__malloc_unlock+0x8>)
 8006e52:	f7ff bc70 	b.w	8006736 <__retarget_lock_release_recursive>
 8006e56:	bf00      	nop
 8006e58:	200007c8 	.word	0x200007c8

08006e5c <_realloc_r>:
 8006e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e60:	4607      	mov	r7, r0
 8006e62:	4614      	mov	r4, r2
 8006e64:	460d      	mov	r5, r1
 8006e66:	b921      	cbnz	r1, 8006e72 <_realloc_r+0x16>
 8006e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	f7ff bddd 	b.w	8006a2c <_malloc_r>
 8006e72:	b92a      	cbnz	r2, 8006e80 <_realloc_r+0x24>
 8006e74:	f000 f858 	bl	8006f28 <_free_r>
 8006e78:	4625      	mov	r5, r4
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e80:	f000 f89c 	bl	8006fbc <_malloc_usable_size_r>
 8006e84:	4284      	cmp	r4, r0
 8006e86:	4606      	mov	r6, r0
 8006e88:	d802      	bhi.n	8006e90 <_realloc_r+0x34>
 8006e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e8e:	d8f4      	bhi.n	8006e7a <_realloc_r+0x1e>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4638      	mov	r0, r7
 8006e94:	f7ff fdca 	bl	8006a2c <_malloc_r>
 8006e98:	4680      	mov	r8, r0
 8006e9a:	b908      	cbnz	r0, 8006ea0 <_realloc_r+0x44>
 8006e9c:	4645      	mov	r5, r8
 8006e9e:	e7ec      	b.n	8006e7a <_realloc_r+0x1e>
 8006ea0:	42b4      	cmp	r4, r6
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	bf28      	it	cs
 8006ea8:	4632      	movcs	r2, r6
 8006eaa:	f000 f82f 	bl	8006f0c <memcpy>
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f000 f839 	bl	8006f28 <_free_r>
 8006eb6:	e7f1      	b.n	8006e9c <_realloc_r+0x40>

08006eb8 <memmove>:
 8006eb8:	4288      	cmp	r0, r1
 8006eba:	b510      	push	{r4, lr}
 8006ebc:	eb01 0402 	add.w	r4, r1, r2
 8006ec0:	d902      	bls.n	8006ec8 <memmove+0x10>
 8006ec2:	4284      	cmp	r4, r0
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	d807      	bhi.n	8006ed8 <memmove+0x20>
 8006ec8:	1e43      	subs	r3, r0, #1
 8006eca:	42a1      	cmp	r1, r4
 8006ecc:	d008      	beq.n	8006ee0 <memmove+0x28>
 8006ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ed6:	e7f8      	b.n	8006eca <memmove+0x12>
 8006ed8:	4402      	add	r2, r0
 8006eda:	4601      	mov	r1, r0
 8006edc:	428a      	cmp	r2, r1
 8006ede:	d100      	bne.n	8006ee2 <memmove+0x2a>
 8006ee0:	bd10      	pop	{r4, pc}
 8006ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eea:	e7f7      	b.n	8006edc <memmove+0x24>

08006eec <_sbrk_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d06      	ldr	r5, [pc, #24]	@ (8006f08 <_sbrk_r+0x1c>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	f7fa fe9e 	bl	8001c38 <_sbrk>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_sbrk_r+0x1a>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_sbrk_r+0x1a>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	200007d4 	.word	0x200007d4

08006f0c <memcpy>:
 8006f0c:	440a      	add	r2, r1
 8006f0e:	4291      	cmp	r1, r2
 8006f10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006f14:	d100      	bne.n	8006f18 <memcpy+0xc>
 8006f16:	4770      	bx	lr
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f22:	4291      	cmp	r1, r2
 8006f24:	d1f9      	bne.n	8006f1a <memcpy+0xe>
 8006f26:	bd10      	pop	{r4, pc}

08006f28 <_free_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	2900      	cmp	r1, #0
 8006f2e:	d041      	beq.n	8006fb4 <_free_r+0x8c>
 8006f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f34:	1f0c      	subs	r4, r1, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bfb8      	it	lt
 8006f3a:	18e4      	addlt	r4, r4, r3
 8006f3c:	f7ff ff82 	bl	8006e44 <__malloc_lock>
 8006f40:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb8 <_free_r+0x90>)
 8006f42:	6813      	ldr	r3, [r2, #0]
 8006f44:	b933      	cbnz	r3, 8006f54 <_free_r+0x2c>
 8006f46:	6063      	str	r3, [r4, #4]
 8006f48:	6014      	str	r4, [r2, #0]
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f50:	f7ff bf7e 	b.w	8006e50 <__malloc_unlock>
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	d908      	bls.n	8006f6a <_free_r+0x42>
 8006f58:	6820      	ldr	r0, [r4, #0]
 8006f5a:	1821      	adds	r1, r4, r0
 8006f5c:	428b      	cmp	r3, r1
 8006f5e:	bf01      	itttt	eq
 8006f60:	6819      	ldreq	r1, [r3, #0]
 8006f62:	685b      	ldreq	r3, [r3, #4]
 8006f64:	1809      	addeq	r1, r1, r0
 8006f66:	6021      	streq	r1, [r4, #0]
 8006f68:	e7ed      	b.n	8006f46 <_free_r+0x1e>
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	b10b      	cbz	r3, 8006f74 <_free_r+0x4c>
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	d9fa      	bls.n	8006f6a <_free_r+0x42>
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	1850      	adds	r0, r2, r1
 8006f78:	42a0      	cmp	r0, r4
 8006f7a:	d10b      	bne.n	8006f94 <_free_r+0x6c>
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	4401      	add	r1, r0
 8006f80:	1850      	adds	r0, r2, r1
 8006f82:	4283      	cmp	r3, r0
 8006f84:	6011      	str	r1, [r2, #0]
 8006f86:	d1e0      	bne.n	8006f4a <_free_r+0x22>
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	6053      	str	r3, [r2, #4]
 8006f8e:	4408      	add	r0, r1
 8006f90:	6010      	str	r0, [r2, #0]
 8006f92:	e7da      	b.n	8006f4a <_free_r+0x22>
 8006f94:	d902      	bls.n	8006f9c <_free_r+0x74>
 8006f96:	230c      	movs	r3, #12
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	e7d6      	b.n	8006f4a <_free_r+0x22>
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	1821      	adds	r1, r4, r0
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf04      	itt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	6063      	str	r3, [r4, #4]
 8006faa:	bf04      	itt	eq
 8006fac:	1809      	addeq	r1, r1, r0
 8006fae:	6021      	streq	r1, [r4, #0]
 8006fb0:	6054      	str	r4, [r2, #4]
 8006fb2:	e7ca      	b.n	8006f4a <_free_r+0x22>
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200007d0 	.word	0x200007d0

08006fbc <_malloc_usable_size_r>:
 8006fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc0:	1f18      	subs	r0, r3, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfbc      	itt	lt
 8006fc6:	580b      	ldrlt	r3, [r1, r0]
 8006fc8:	18c0      	addlt	r0, r0, r3
 8006fca:	4770      	bx	lr

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
